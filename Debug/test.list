
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c88  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002de8  08002de8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002de8  08002de8  00012de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002df0  08002df0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002df0  08002df0  00012df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002df4  08002df4  00012df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000124  2000000c  08002e04  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08002e04  00020130  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bdae  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002096  00000000  00000000  0002be26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b48  00000000  00000000  0002dec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000899  00000000  00000000  0002ea08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000168d3  00000000  00000000  0002f2a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e2cc  00000000  00000000  00045b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bb85  00000000  00000000  00053e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002d6c  00000000  00000000  000df9c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000e2734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	08002dac 	.word	0x08002dac

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	08002dac 	.word	0x08002dac

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b972 	b.w	8000478 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d14c      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001bc:	428a      	cmp	r2, r1
 80001be:	4694      	mov	ip, r2
 80001c0:	d967      	bls.n	8000292 <__udivmoddi4+0xe6>
 80001c2:	fab2 f382 	clz	r3, r2
 80001c6:	b153      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001c8:	fa02 fc03 	lsl.w	ip, r2, r3
 80001cc:	f1c3 0220 	rsb	r2, r3, #32
 80001d0:	fa01 fe03 	lsl.w	lr, r1, r3
 80001d4:	fa20 f202 	lsr.w	r2, r0, r2
 80001d8:	ea42 0e0e 	orr.w	lr, r2, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001e2:	fbbe f1f7 	udiv	r1, lr, r7
 80001e6:	fa1f f58c 	uxth.w	r5, ip
 80001ea:	fb07 ee11 	mls	lr, r7, r1, lr
 80001ee:	fb01 f005 	mul.w	r0, r1, r5
 80001f2:	0c22      	lsrs	r2, r4, #16
 80001f4:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000200:	f101 3eff 	add.w	lr, r1, #4294967295
 8000204:	f080 8119 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000208:	4290      	cmp	r0, r2
 800020a:	f240 8116 	bls.w	800043a <__udivmoddi4+0x28e>
 800020e:	3902      	subs	r1, #2
 8000210:	4462      	add	r2, ip
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f7 	udiv	r0, r2, r7
 8000218:	fb07 2210 	mls	r2, r7, r0, r2
 800021c:	fb00 f505 	mul.w	r5, r0, r5
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a5      	cmp	r5, r4
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0404 	adds.w	r4, ip, r4
 800022e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000232:	f080 8104 	bcs.w	800043e <__udivmoddi4+0x292>
 8000236:	42a5      	cmp	r5, r4
 8000238:	f240 8101 	bls.w	800043e <__udivmoddi4+0x292>
 800023c:	4464      	add	r4, ip
 800023e:	3802      	subs	r0, #2
 8000240:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	1b64      	subs	r4, r4, r5
 8000248:	b11e      	cbz	r6, 8000252 <__udivmoddi4+0xa6>
 800024a:	40dc      	lsrs	r4, r3
 800024c:	2300      	movs	r3, #0
 800024e:	e9c6 4300 	strd	r4, r3, [r6]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d908      	bls.n	800026c <__udivmoddi4+0xc0>
 800025a:	2e00      	cmp	r6, #0
 800025c:	f000 80ea 	beq.w	8000434 <__udivmoddi4+0x288>
 8000260:	2100      	movs	r1, #0
 8000262:	e9c6 0500 	strd	r0, r5, [r6]
 8000266:	4608      	mov	r0, r1
 8000268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026c:	fab3 f183 	clz	r1, r3
 8000270:	2900      	cmp	r1, #0
 8000272:	d148      	bne.n	8000306 <__udivmoddi4+0x15a>
 8000274:	42ab      	cmp	r3, r5
 8000276:	d302      	bcc.n	800027e <__udivmoddi4+0xd2>
 8000278:	4282      	cmp	r2, r0
 800027a:	f200 80f8 	bhi.w	800046e <__udivmoddi4+0x2c2>
 800027e:	1a84      	subs	r4, r0, r2
 8000280:	eb65 0203 	sbc.w	r2, r5, r3
 8000284:	2001      	movs	r0, #1
 8000286:	4696      	mov	lr, r2
 8000288:	2e00      	cmp	r6, #0
 800028a:	d0e2      	beq.n	8000252 <__udivmoddi4+0xa6>
 800028c:	e9c6 4e00 	strd	r4, lr, [r6]
 8000290:	e7df      	b.n	8000252 <__udivmoddi4+0xa6>
 8000292:	b902      	cbnz	r2, 8000296 <__udivmoddi4+0xea>
 8000294:	deff      	udf	#255	; 0xff
 8000296:	fab2 f382 	clz	r3, r2
 800029a:	2b00      	cmp	r3, #0
 800029c:	f040 808e 	bne.w	80003bc <__udivmoddi4+0x210>
 80002a0:	1a88      	subs	r0, r1, r2
 80002a2:	2101      	movs	r1, #1
 80002a4:	0c17      	lsrs	r7, r2, #16
 80002a6:	fa1f fe82 	uxth.w	lr, r2
 80002aa:	fbb0 f5f7 	udiv	r5, r0, r7
 80002ae:	fb07 0015 	mls	r0, r7, r5, r0
 80002b2:	0c22      	lsrs	r2, r4, #16
 80002b4:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80002b8:	fb0e f005 	mul.w	r0, lr, r5
 80002bc:	4290      	cmp	r0, r2
 80002be:	d908      	bls.n	80002d2 <__udivmoddi4+0x126>
 80002c0:	eb1c 0202 	adds.w	r2, ip, r2
 80002c4:	f105 38ff 	add.w	r8, r5, #4294967295
 80002c8:	d202      	bcs.n	80002d0 <__udivmoddi4+0x124>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f200 80cc 	bhi.w	8000468 <__udivmoddi4+0x2bc>
 80002d0:	4645      	mov	r5, r8
 80002d2:	1a12      	subs	r2, r2, r0
 80002d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80002d8:	fb07 2210 	mls	r2, r7, r0, r2
 80002dc:	fb0e fe00 	mul.w	lr, lr, r0
 80002e0:	b2a4      	uxth	r4, r4
 80002e2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0x150>
 80002ea:	eb1c 0404 	adds.w	r4, ip, r4
 80002ee:	f100 32ff 	add.w	r2, r0, #4294967295
 80002f2:	d202      	bcs.n	80002fa <__udivmoddi4+0x14e>
 80002f4:	45a6      	cmp	lr, r4
 80002f6:	f200 80b4 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 80002fa:	4610      	mov	r0, r2
 80002fc:	eba4 040e 	sub.w	r4, r4, lr
 8000300:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000304:	e7a0      	b.n	8000248 <__udivmoddi4+0x9c>
 8000306:	f1c1 0720 	rsb	r7, r1, #32
 800030a:	408b      	lsls	r3, r1
 800030c:	fa22 fc07 	lsr.w	ip, r2, r7
 8000310:	ea4c 0c03 	orr.w	ip, ip, r3
 8000314:	fa25 fa07 	lsr.w	sl, r5, r7
 8000318:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800031c:	fbba f8f9 	udiv	r8, sl, r9
 8000320:	408d      	lsls	r5, r1
 8000322:	fa20 f307 	lsr.w	r3, r0, r7
 8000326:	fb09 aa18 	mls	sl, r9, r8, sl
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	432b      	orrs	r3, r5
 8000330:	fa00 f501 	lsl.w	r5, r0, r1
 8000334:	fb08 f00e 	mul.w	r0, r8, lr
 8000338:	0c1c      	lsrs	r4, r3, #16
 800033a:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800033e:	42a0      	cmp	r0, r4
 8000340:	fa02 f201 	lsl.w	r2, r2, r1
 8000344:	d90b      	bls.n	800035e <__udivmoddi4+0x1b2>
 8000346:	eb1c 0404 	adds.w	r4, ip, r4
 800034a:	f108 3aff 	add.w	sl, r8, #4294967295
 800034e:	f080 8086 	bcs.w	800045e <__udivmoddi4+0x2b2>
 8000352:	42a0      	cmp	r0, r4
 8000354:	f240 8083 	bls.w	800045e <__udivmoddi4+0x2b2>
 8000358:	f1a8 0802 	sub.w	r8, r8, #2
 800035c:	4464      	add	r4, ip
 800035e:	1a24      	subs	r4, r4, r0
 8000360:	b298      	uxth	r0, r3
 8000362:	fbb4 f3f9 	udiv	r3, r4, r9
 8000366:	fb09 4413 	mls	r4, r9, r3, r4
 800036a:	fb03 fe0e 	mul.w	lr, r3, lr
 800036e:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 8000372:	45a6      	cmp	lr, r4
 8000374:	d908      	bls.n	8000388 <__udivmoddi4+0x1dc>
 8000376:	eb1c 0404 	adds.w	r4, ip, r4
 800037a:	f103 30ff 	add.w	r0, r3, #4294967295
 800037e:	d26a      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 8000380:	45a6      	cmp	lr, r4
 8000382:	d968      	bls.n	8000456 <__udivmoddi4+0x2aa>
 8000384:	3b02      	subs	r3, #2
 8000386:	4464      	add	r4, ip
 8000388:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 800038c:	fba0 9302 	umull	r9, r3, r0, r2
 8000390:	eba4 040e 	sub.w	r4, r4, lr
 8000394:	429c      	cmp	r4, r3
 8000396:	46c8      	mov	r8, r9
 8000398:	469e      	mov	lr, r3
 800039a:	d354      	bcc.n	8000446 <__udivmoddi4+0x29a>
 800039c:	d051      	beq.n	8000442 <__udivmoddi4+0x296>
 800039e:	2e00      	cmp	r6, #0
 80003a0:	d067      	beq.n	8000472 <__udivmoddi4+0x2c6>
 80003a2:	ebb5 0308 	subs.w	r3, r5, r8
 80003a6:	eb64 040e 	sbc.w	r4, r4, lr
 80003aa:	40cb      	lsrs	r3, r1
 80003ac:	fa04 f707 	lsl.w	r7, r4, r7
 80003b0:	431f      	orrs	r7, r3
 80003b2:	40cc      	lsrs	r4, r1
 80003b4:	e9c6 7400 	strd	r7, r4, [r6]
 80003b8:	2100      	movs	r1, #0
 80003ba:	e74a      	b.n	8000252 <__udivmoddi4+0xa6>
 80003bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003c0:	f1c3 0020 	rsb	r0, r3, #32
 80003c4:	40c1      	lsrs	r1, r0
 80003c6:	409d      	lsls	r5, r3
 80003c8:	fa24 f000 	lsr.w	r0, r4, r0
 80003cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d0:	4328      	orrs	r0, r5
 80003d2:	fbb1 f5f7 	udiv	r5, r1, r7
 80003d6:	fb07 1115 	mls	r1, r7, r5, r1
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	0c02      	lsrs	r2, r0, #16
 80003e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80003e4:	fb05 f10e 	mul.w	r1, r5, lr
 80003e8:	4291      	cmp	r1, r2
 80003ea:	fa04 f403 	lsl.w	r4, r4, r3
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x256>
 80003f0:	eb1c 0202 	adds.w	r2, ip, r2
 80003f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80003f8:	d22f      	bcs.n	800045a <__udivmoddi4+0x2ae>
 80003fa:	4291      	cmp	r1, r2
 80003fc:	d92d      	bls.n	800045a <__udivmoddi4+0x2ae>
 80003fe:	3d02      	subs	r5, #2
 8000400:	4462      	add	r2, ip
 8000402:	1a52      	subs	r2, r2, r1
 8000404:	fbb2 f1f7 	udiv	r1, r2, r7
 8000408:	fb07 2211 	mls	r2, r7, r1, r2
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000412:	fb01 f20e 	mul.w	r2, r1, lr
 8000416:	4282      	cmp	r2, r0
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x280>
 800041a:	eb1c 0000 	adds.w	r0, ip, r0
 800041e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000422:	d216      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000424:	4282      	cmp	r2, r0
 8000426:	d914      	bls.n	8000452 <__udivmoddi4+0x2a6>
 8000428:	3902      	subs	r1, #2
 800042a:	4460      	add	r0, ip
 800042c:	1a80      	subs	r0, r0, r2
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	e73a      	b.n	80002aa <__udivmoddi4+0xfe>
 8000434:	4631      	mov	r1, r6
 8000436:	4630      	mov	r0, r6
 8000438:	e70b      	b.n	8000252 <__udivmoddi4+0xa6>
 800043a:	4671      	mov	r1, lr
 800043c:	e6e9      	b.n	8000212 <__udivmoddi4+0x66>
 800043e:	4610      	mov	r0, r2
 8000440:	e6fe      	b.n	8000240 <__udivmoddi4+0x94>
 8000442:	454d      	cmp	r5, r9
 8000444:	d2ab      	bcs.n	800039e <__udivmoddi4+0x1f2>
 8000446:	ebb9 0802 	subs.w	r8, r9, r2
 800044a:	eb63 0e0c 	sbc.w	lr, r3, ip
 800044e:	3801      	subs	r0, #1
 8000450:	e7a5      	b.n	800039e <__udivmoddi4+0x1f2>
 8000452:	4641      	mov	r1, r8
 8000454:	e7ea      	b.n	800042c <__udivmoddi4+0x280>
 8000456:	4603      	mov	r3, r0
 8000458:	e796      	b.n	8000388 <__udivmoddi4+0x1dc>
 800045a:	4645      	mov	r5, r8
 800045c:	e7d1      	b.n	8000402 <__udivmoddi4+0x256>
 800045e:	46d0      	mov	r8, sl
 8000460:	e77d      	b.n	800035e <__udivmoddi4+0x1b2>
 8000462:	4464      	add	r4, ip
 8000464:	3802      	subs	r0, #2
 8000466:	e749      	b.n	80002fc <__udivmoddi4+0x150>
 8000468:	3d02      	subs	r5, #2
 800046a:	4462      	add	r2, ip
 800046c:	e731      	b.n	80002d2 <__udivmoddi4+0x126>
 800046e:	4608      	mov	r0, r1
 8000470:	e70a      	b.n	8000288 <__udivmoddi4+0xdc>
 8000472:	4631      	mov	r1, r6
 8000474:	e6ed      	b.n	8000252 <__udivmoddi4+0xa6>
 8000476:	bf00      	nop

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	b08a      	sub	sp, #40	; 0x28
 8000480:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000482:	f107 0314 	add.w	r3, r7, #20
 8000486:	2200      	movs	r2, #0
 8000488:	601a      	str	r2, [r3, #0]
 800048a:	605a      	str	r2, [r3, #4]
 800048c:	609a      	str	r2, [r3, #8]
 800048e:	60da      	str	r2, [r3, #12]
 8000490:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000492:	4b35      	ldr	r3, [pc, #212]	; (8000568 <MX_GPIO_Init+0xec>)
 8000494:	69db      	ldr	r3, [r3, #28]
 8000496:	4a34      	ldr	r2, [pc, #208]	; (8000568 <MX_GPIO_Init+0xec>)
 8000498:	f043 0304 	orr.w	r3, r3, #4
 800049c:	61d3      	str	r3, [r2, #28]
 800049e:	4b32      	ldr	r3, [pc, #200]	; (8000568 <MX_GPIO_Init+0xec>)
 80004a0:	69db      	ldr	r3, [r3, #28]
 80004a2:	f003 0304 	and.w	r3, r3, #4
 80004a6:	613b      	str	r3, [r7, #16]
 80004a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004aa:	4b2f      	ldr	r3, [pc, #188]	; (8000568 <MX_GPIO_Init+0xec>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a2e      	ldr	r2, [pc, #184]	; (8000568 <MX_GPIO_Init+0xec>)
 80004b0:	f043 0320 	orr.w	r3, r3, #32
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b2c      	ldr	r3, [pc, #176]	; (8000568 <MX_GPIO_Init+0xec>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 0320 	and.w	r3, r3, #32
 80004be:	60fb      	str	r3, [r7, #12]
 80004c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c2:	4b29      	ldr	r3, [pc, #164]	; (8000568 <MX_GPIO_Init+0xec>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	4a28      	ldr	r2, [pc, #160]	; (8000568 <MX_GPIO_Init+0xec>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	61d3      	str	r3, [r2, #28]
 80004ce:	4b26      	ldr	r3, [pc, #152]	; (8000568 <MX_GPIO_Init+0xec>)
 80004d0:	69db      	ldr	r3, [r3, #28]
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60bb      	str	r3, [r7, #8]
 80004d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004da:	4b23      	ldr	r3, [pc, #140]	; (8000568 <MX_GPIO_Init+0xec>)
 80004dc:	69db      	ldr	r3, [r3, #28]
 80004de:	4a22      	ldr	r2, [pc, #136]	; (8000568 <MX_GPIO_Init+0xec>)
 80004e0:	f043 0302 	orr.w	r3, r3, #2
 80004e4:	61d3      	str	r3, [r2, #28]
 80004e6:	4b20      	ldr	r3, [pc, #128]	; (8000568 <MX_GPIO_Init+0xec>)
 80004e8:	69db      	ldr	r3, [r3, #28]
 80004ea:	f003 0302 	and.w	r3, r3, #2
 80004ee:	607b      	str	r3, [r7, #4]
 80004f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80004f2:	2200      	movs	r2, #0
 80004f4:	2120      	movs	r1, #32
 80004f6:	481d      	ldr	r0, [pc, #116]	; (800056c <MX_GPIO_Init+0xf0>)
 80004f8:	f000 ffab 	bl	8001452 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80004fc:	2320      	movs	r3, #32
 80004fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000500:	2301      	movs	r3, #1
 8000502:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	2300      	movs	r3, #0
 8000506:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000508:	2300      	movs	r3, #0
 800050a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800050c:	f107 0314 	add.w	r3, r7, #20
 8000510:	4619      	mov	r1, r3
 8000512:	4816      	ldr	r0, [pc, #88]	; (800056c <MX_GPIO_Init+0xf0>)
 8000514:	f000 fdf6 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB11 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8000518:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800051c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800051e:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000522:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000528:	f107 0314 	add.w	r3, r7, #20
 800052c:	4619      	mov	r1, r3
 800052e:	4810      	ldr	r0, [pc, #64]	; (8000570 <MX_GPIO_Init+0xf4>)
 8000530:	f000 fde8 	bl	8001104 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000538:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800053a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800053e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000544:	f107 0314 	add.w	r3, r7, #20
 8000548:	4619      	mov	r1, r3
 800054a:	4808      	ldr	r0, [pc, #32]	; (800056c <MX_GPIO_Init+0xf0>)
 800054c:	f000 fdda 	bl	8001104 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000550:	2200      	movs	r2, #0
 8000552:	2100      	movs	r1, #0
 8000554:	2028      	movs	r0, #40	; 0x28
 8000556:	f000 fd9e 	bl	8001096 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800055a:	2028      	movs	r0, #40	; 0x28
 800055c:	f000 fdb7 	bl	80010ce <HAL_NVIC_EnableIRQ>

}
 8000560:	bf00      	nop
 8000562:	3728      	adds	r7, #40	; 0x28
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	40023800 	.word	0x40023800
 800056c:	40020000 	.word	0x40020000
 8000570:	40020400 	.word	0x40020400

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fc47 	bl	8000e0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f828 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f7ff ff7c 	bl	800047c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 fa8a 	bl	8000a9c <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000588:	f000 f910 	bl	80007ac <MX_TIM3_Init>
  MX_TIM4_Init();
 800058c:	f000 f982 	bl	8000894 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //DWT_Init();

  SERVO_attach(0, DEFAULT_PULSE_WIDTH);
 8000590:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fb7d 	bl	8000c94 <SERVO_attach>

  if (HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1) != HAL_OK)
 800059a:	2100      	movs	r1, #0
 800059c:	480b      	ldr	r0, [pc, #44]	; (80005cc <main+0x58>)
 800059e:	f001 fe07 	bl	80021b0 <HAL_TIM_PWM_Start>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <main+0x38>
  {
	  Error_Handler();
 80005a8:	f000 f880 	bl	80006ac <Error_Handler>
//	for (uint8_t pos=180; pos>=1; pos -= 1)
//	{
//		SERVO_write(pos);
//		delay(15);
//	}
	analogWrite(50);
 80005ac:	2032      	movs	r0, #50	; 0x32
 80005ae:	f000 fbf5 	bl	8000d9c <analogWrite>
	delay(2000);
 80005b2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005b6:	f000 fbd8 	bl	8000d6a <delay>
	analogWrite(100);
 80005ba:	2064      	movs	r0, #100	; 0x64
 80005bc:	f000 fbee 	bl	8000d9c <analogWrite>
	delay(2000);
 80005c0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80005c4:	f000 fbd1 	bl	8000d6a <delay>
	analogWrite(50);
 80005c8:	e7f0      	b.n	80005ac <main+0x38>
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b092      	sub	sp, #72	; 0x48
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 0314 	add.w	r3, r7, #20
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f002 fbb8 	bl	8002d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	463b      	mov	r3, r7
 80005e6:	2200      	movs	r2, #0
 80005e8:	601a      	str	r2, [r3, #0]
 80005ea:	605a      	str	r2, [r3, #4]
 80005ec:	609a      	str	r2, [r3, #8]
 80005ee:	60da      	str	r2, [r3, #12]
 80005f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005f2:	4b1d      	ldr	r3, [pc, #116]	; (8000668 <SystemClock_Config+0x98>)
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80005fa:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <SystemClock_Config+0x98>)
 80005fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000600:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000602:	2302      	movs	r3, #2
 8000604:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000606:	2301      	movs	r3, #1
 8000608:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800060a:	2310      	movs	r3, #16
 800060c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060e:	2302      	movs	r3, #2
 8000610:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000612:	2300      	movs	r3, #0
 8000614:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000616:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800061a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800061c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8000620:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000622:	f107 0314 	add.w	r3, r7, #20
 8000626:	4618      	mov	r0, r3
 8000628:	f000 ff44 	bl	80014b4 <HAL_RCC_OscConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000632:	f000 f83b 	bl	80006ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000636:	230f      	movs	r3, #15
 8000638:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063a:	2303      	movs	r3, #3
 800063c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800063e:	2300      	movs	r3, #0
 8000640:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800064a:	463b      	mov	r3, r7
 800064c:	2101      	movs	r1, #1
 800064e:	4618      	mov	r0, r3
 8000650:	f001 fa60 	bl	8001b14 <HAL_RCC_ClockConfig>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800065a:	f000 f827 	bl	80006ac <Error_Handler>
  }
}
 800065e:	bf00      	nop
 8000660:	3748      	adds	r7, #72	; 0x48
 8000662:	46bd      	mov	sp, r7
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	40007000 	.word	0x40007000

0800066c <HAL_GPIO_EXTI_Callback>:
	return sRxDataSendQueue.pwmVal;
	//HAL_Delay(100);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
 8000672:	4603      	mov	r3, r0
 8000674:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_10)
 8000676:	88fb      	ldrh	r3, [r7, #6]
 8000678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800067c:	d110      	bne.n	80006a0 <HAL_GPIO_EXTI_Callback+0x34>
	{
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET)
 800067e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000682:	4809      	ldr	r0, [pc, #36]	; (80006a8 <HAL_GPIO_EXTI_Callback+0x3c>)
 8000684:	f000 fece 	bl	8001424 <HAL_GPIO_ReadPin>
 8000688:	4603      	mov	r3, r0
 800068a:	2b01      	cmp	r3, #1
 800068c:	d104      	bne.n	8000698 <HAL_GPIO_EXTI_Callback+0x2c>
		{
			RX_ReadRaw(RX_STATE_ACTIVE, RX_INPUT_MAP_CHANNEL_1_TO_NUMBER);
 800068e:	2100      	movs	r1, #0
 8000690:	2001      	movs	r0, #1
 8000692:	f000 fa71 	bl	8000b78 <RX_ReadRaw>
		else
		{
			RX_ReadRaw(RX_STATE_INACTIVE, RX_INPUT_MAP_CHANNEL_1_TO_NUMBER);
		}
	}
}
 8000696:	e003      	b.n	80006a0 <HAL_GPIO_EXTI_Callback+0x34>
			RX_ReadRaw(RX_STATE_INACTIVE, RX_INPUT_MAP_CHANNEL_1_TO_NUMBER);
 8000698:	2100      	movs	r1, #0
 800069a:	2000      	movs	r0, #0
 800069c:	f000 fa6c 	bl	8000b78 <RX_ReadRaw>
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40020000 	.word	0x40020000

080006ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b0:	b672      	cpsid	i
}
 80006b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <Error_Handler+0x8>
	...

080006b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_MspInit+0x5c>)
 80006c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006c2:	4a14      	ldr	r2, [pc, #80]	; (8000714 <HAL_MspInit+0x5c>)
 80006c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80006c8:	6253      	str	r3, [r2, #36]	; 0x24
 80006ca:	4b12      	ldr	r3, [pc, #72]	; (8000714 <HAL_MspInit+0x5c>)
 80006cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80006d2:	60fb      	str	r3, [r7, #12]
 80006d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <HAL_MspInit+0x5c>)
 80006d8:	6a1b      	ldr	r3, [r3, #32]
 80006da:	4a0e      	ldr	r2, [pc, #56]	; (8000714 <HAL_MspInit+0x5c>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6213      	str	r3, [r2, #32]
 80006e2:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <HAL_MspInit+0x5c>)
 80006e4:	6a1b      	ldr	r3, [r3, #32]
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	; (8000714 <HAL_MspInit+0x5c>)
 80006f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006f2:	4a08      	ldr	r2, [pc, #32]	; (8000714 <HAL_MspInit+0x5c>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f8:	6253      	str	r3, [r2, #36]	; 0x24
 80006fa:	4b06      	ldr	r3, [pc, #24]	; (8000714 <HAL_MspInit+0x5c>)
 80006fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000702:	607b      	str	r3, [r7, #4]
 8000704:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000706:	2007      	movs	r0, #7
 8000708:	f000 fcba 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800070c:	bf00      	nop
 800070e:	3710      	adds	r7, #16
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40023800 	.word	0x40023800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800071c:	e7fe      	b.n	800071c <NMI_Handler+0x4>

0800071e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800071e:	b480      	push	{r7}
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000722:	e7fe      	b.n	8000722 <HardFault_Handler+0x4>

08000724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000724:	b480      	push	{r7}
 8000726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000728:	e7fe      	b.n	8000728 <MemManage_Handler+0x4>

0800072a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800072a:	b480      	push	{r7}
 800072c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800072e:	e7fe      	b.n	800072e <BusFault_Handler+0x4>

08000730 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000734:	e7fe      	b.n	8000734 <UsageFault_Handler+0x4>

08000736 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000746:	bf00      	nop
 8000748:	46bd      	mov	sp, r7
 800074a:	bc80      	pop	{r7}
 800074c:	4770      	bx	lr

0800074e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr

0800075a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800075a:	b580      	push	{r7, lr}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800075e:	f000 fba7 	bl	8000eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}

08000766 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000766:	b580      	push	{r7, lr}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 800076a:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800076e:	f000 fe89 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8000772:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000776:	f000 fe85 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 800077a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800077e:	f000 fe81 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000782:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000786:	f000 fe7d 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 800078a:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800078e:	f000 fe79 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8000792:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000796:	f000 fe75 	bl	8001484 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}

0800079e <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800079e:	b480      	push	{r7}
 80007a0:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bc80      	pop	{r7}
 80007a8:	4770      	bx	lr
	...

080007ac <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b08a      	sub	sp, #40	; 0x28
 80007b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007b2:	f107 0318 	add.w	r3, r7, #24
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007c0:	f107 0310 	add.w	r3, r7, #16
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007d6:	4b2d      	ldr	r3, [pc, #180]	; (800088c <MX_TIM3_Init+0xe0>)
 80007d8:	4a2d      	ldr	r2, [pc, #180]	; (8000890 <MX_TIM3_Init+0xe4>)
 80007da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 31;
 80007dc:	4b2b      	ldr	r3, [pc, #172]	; (800088c <MX_TIM3_Init+0xe0>)
 80007de:	221f      	movs	r2, #31
 80007e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e2:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_TIM3_Init+0xe0>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 80007e8:	4b28      	ldr	r3, [pc, #160]	; (800088c <MX_TIM3_Init+0xe0>)
 80007ea:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80007ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f0:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_TIM3_Init+0xe0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007f6:	4b25      	ldr	r3, [pc, #148]	; (800088c <MX_TIM3_Init+0xe0>)
 80007f8:	2280      	movs	r2, #128	; 0x80
 80007fa:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007fc:	4823      	ldr	r0, [pc, #140]	; (800088c <MX_TIM3_Init+0xe0>)
 80007fe:	f001 fc4f 	bl	80020a0 <HAL_TIM_Base_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000808:	f7ff ff50 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800080c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000810:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4619      	mov	r1, r3
 8000818:	481c      	ldr	r0, [pc, #112]	; (800088c <MX_TIM3_Init+0xe0>)
 800081a:	f001 fe21 	bl	8002460 <HAL_TIM_ConfigClockSource>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000824:	f7ff ff42 	bl	80006ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000828:	4818      	ldr	r0, [pc, #96]	; (800088c <MX_TIM3_Init+0xe0>)
 800082a:	f001 fc78 	bl	800211e <HAL_TIM_PWM_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000834:	f7ff ff3a 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000838:	2300      	movs	r3, #0
 800083a:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000840:	f107 0310 	add.w	r3, r7, #16
 8000844:	4619      	mov	r1, r3
 8000846:	4811      	ldr	r0, [pc, #68]	; (800088c <MX_TIM3_Init+0xe0>)
 8000848:	f002 f8f2 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 8000852:	f7ff ff2b 	bl	80006ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000856:	2360      	movs	r3, #96	; 0x60
 8000858:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800085a:	2300      	movs	r3, #0
 800085c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000866:	463b      	mov	r3, r7
 8000868:	2200      	movs	r2, #0
 800086a:	4619      	mov	r1, r3
 800086c:	4807      	ldr	r0, [pc, #28]	; (800088c <MX_TIM3_Init+0xe0>)
 800086e:	f001 fd35 	bl	80022dc <HAL_TIM_PWM_ConfigChannel>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d001      	beq.n	800087c <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000878:	f7ff ff18 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800087c:	4803      	ldr	r0, [pc, #12]	; (800088c <MX_TIM3_Init+0xe0>)
 800087e:	f000 f8af 	bl	80009e0 <HAL_TIM_MspPostInit>

}
 8000882:	bf00      	nop
 8000884:	3728      	adds	r7, #40	; 0x28
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000028 	.word	0x20000028
 8000890:	40000400 	.word	0x40000400

08000894 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b08a      	sub	sp, #40	; 0x28
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800089a:	f107 0318 	add.w	r3, r7, #24
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
 80008a2:	605a      	str	r2, [r3, #4]
 80008a4:	609a      	str	r2, [r3, #8]
 80008a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a8:	f107 0310 	add.w	r3, r7, #16
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008b2:	463b      	mov	r3, r7
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008be:	4b2d      	ldr	r3, [pc, #180]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008c0:	4a2d      	ldr	r2, [pc, #180]	; (8000978 <MX_TIM4_Init+0xe4>)
 80008c2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 310;
 80008c4:	4b2b      	ldr	r3, [pc, #172]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008c6:	f44f 729b 	mov.w	r2, #310	; 0x136
 80008ca:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008cc:	4b29      	ldr	r3, [pc, #164]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 199;
 80008d2:	4b28      	ldr	r3, [pc, #160]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008d4:	22c7      	movs	r2, #199	; 0xc7
 80008d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b26      	ldr	r3, [pc, #152]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008de:	4b25      	ldr	r3, [pc, #148]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008e4:	4823      	ldr	r0, [pc, #140]	; (8000974 <MX_TIM4_Init+0xe0>)
 80008e6:	f001 fbdb 	bl	80020a0 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0x60>
  {
    Error_Handler();
 80008f0:	f7ff fedc 	bl	80006ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0318 	add.w	r3, r7, #24
 80008fe:	4619      	mov	r1, r3
 8000900:	481c      	ldr	r0, [pc, #112]	; (8000974 <MX_TIM4_Init+0xe0>)
 8000902:	f001 fdad 	bl	8002460 <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 800090c:	f7ff fece 	bl	80006ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000910:	4818      	ldr	r0, [pc, #96]	; (8000974 <MX_TIM4_Init+0xe0>)
 8000912:	f001 fc04 	bl	800211e <HAL_TIM_PWM_Init>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800091c:	f7ff fec6 	bl	80006ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000924:	2300      	movs	r3, #0
 8000926:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000928:	f107 0310 	add.w	r3, r7, #16
 800092c:	4619      	mov	r1, r3
 800092e:	4811      	ldr	r0, [pc, #68]	; (8000974 <MX_TIM4_Init+0xe0>)
 8000930:	f002 f87e 	bl	8002a30 <HAL_TIMEx_MasterConfigSynchronization>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_TIM4_Init+0xaa>
  {
    Error_Handler();
 800093a:	f7ff feb7 	bl	80006ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800093e:	2360      	movs	r3, #96	; 0x60
 8000940:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000946:	2300      	movs	r3, #0
 8000948:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800094e:	463b      	mov	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	4619      	mov	r1, r3
 8000954:	4807      	ldr	r0, [pc, #28]	; (8000974 <MX_TIM4_Init+0xe0>)
 8000956:	f001 fcc1 	bl	80022dc <HAL_TIM_PWM_ConfigChannel>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM4_Init+0xd0>
  {
    Error_Handler();
 8000960:	f7ff fea4 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000964:	4803      	ldr	r0, [pc, #12]	; (8000974 <MX_TIM4_Init+0xe0>)
 8000966:	f000 f83b 	bl	80009e0 <HAL_TIM_MspPostInit>

}
 800096a:	bf00      	nop
 800096c:	3728      	adds	r7, #40	; 0x28
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	20000068 	.word	0x20000068
 8000978:	40000800 	.word	0x40000800

0800097c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <HAL_TIM_Base_MspInit+0x58>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d10c      	bne.n	80009a8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800098e:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <HAL_TIM_Base_MspInit+0x5c>)
 8000990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000992:	4a11      	ldr	r2, [pc, #68]	; (80009d8 <HAL_TIM_Base_MspInit+0x5c>)
 8000994:	f043 0302 	orr.w	r3, r3, #2
 8000998:	6253      	str	r3, [r2, #36]	; 0x24
 800099a:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <HAL_TIM_Base_MspInit+0x5c>)
 800099c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800099e:	f003 0302 	and.w	r3, r3, #2
 80009a2:	60fb      	str	r3, [r7, #12]
 80009a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80009a6:	e010      	b.n	80009ca <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM4)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a0b      	ldr	r2, [pc, #44]	; (80009dc <HAL_TIM_Base_MspInit+0x60>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d10b      	bne.n	80009ca <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80009b2:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <HAL_TIM_Base_MspInit+0x5c>)
 80009b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009b6:	4a08      	ldr	r2, [pc, #32]	; (80009d8 <HAL_TIM_Base_MspInit+0x5c>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	6253      	str	r3, [r2, #36]	; 0x24
 80009be:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <HAL_TIM_Base_MspInit+0x5c>)
 80009c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	60bb      	str	r3, [r7, #8]
 80009c8:	68bb      	ldr	r3, [r7, #8]
}
 80009ca:	bf00      	nop
 80009cc:	3714      	adds	r7, #20
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	40000400 	.word	0x40000400
 80009d8:	40023800 	.word	0x40023800
 80009dc:	40000800 	.word	0x40000800

080009e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	f107 0314 	add.w	r3, r7, #20
 80009ec:	2200      	movs	r2, #0
 80009ee:	601a      	str	r2, [r3, #0]
 80009f0:	605a      	str	r2, [r3, #4]
 80009f2:	609a      	str	r2, [r3, #8]
 80009f4:	60da      	str	r2, [r3, #12]
 80009f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a22      	ldr	r2, [pc, #136]	; (8000a88 <HAL_TIM_MspPostInit+0xa8>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d11c      	bne.n	8000a3c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a02:	4b22      	ldr	r3, [pc, #136]	; (8000a8c <HAL_TIM_MspPostInit+0xac>)
 8000a04:	69db      	ldr	r3, [r3, #28]
 8000a06:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <HAL_TIM_MspPostInit+0xac>)
 8000a08:	f043 0301 	orr.w	r3, r3, #1
 8000a0c:	61d3      	str	r3, [r2, #28]
 8000a0e:	4b1f      	ldr	r3, [pc, #124]	; (8000a8c <HAL_TIM_MspPostInit+0xac>)
 8000a10:	69db      	ldr	r3, [r3, #28]
 8000a12:	f003 0301 	and.w	r3, r3, #1
 8000a16:	613b      	str	r3, [r7, #16]
 8000a18:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = SERVO_CH_Pin;
 8000a1a:	2340      	movs	r3, #64	; 0x40
 8000a1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_CH_GPIO_Port, &GPIO_InitStruct);
 8000a2e:	f107 0314 	add.w	r3, r7, #20
 8000a32:	4619      	mov	r1, r3
 8000a34:	4816      	ldr	r0, [pc, #88]	; (8000a90 <HAL_TIM_MspPostInit+0xb0>)
 8000a36:	f000 fb65 	bl	8001104 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000a3a:	e020      	b.n	8000a7e <HAL_TIM_MspPostInit+0x9e>
  else if(timHandle->Instance==TIM4)
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <HAL_TIM_MspPostInit+0xb4>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d11b      	bne.n	8000a7e <HAL_TIM_MspPostInit+0x9e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a46:	4b11      	ldr	r3, [pc, #68]	; (8000a8c <HAL_TIM_MspPostInit+0xac>)
 8000a48:	69db      	ldr	r3, [r3, #28]
 8000a4a:	4a10      	ldr	r2, [pc, #64]	; (8000a8c <HAL_TIM_MspPostInit+0xac>)
 8000a4c:	f043 0302 	orr.w	r3, r3, #2
 8000a50:	61d3      	str	r3, [r2, #28]
 8000a52:	4b0e      	ldr	r3, [pc, #56]	; (8000a8c <HAL_TIM_MspPostInit+0xac>)
 8000a54:	69db      	ldr	r3, [r3, #28]
 8000a56:	f003 0302 	and.w	r3, r3, #2
 8000a5a:	60fb      	str	r3, [r7, #12]
 8000a5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_LED_Pin;
 8000a5e:	2340      	movs	r3, #64	; 0x40
 8000a60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(PWM_LED_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	4619      	mov	r1, r3
 8000a78:	4807      	ldr	r0, [pc, #28]	; (8000a98 <HAL_TIM_MspPostInit+0xb8>)
 8000a7a:	f000 fb43 	bl	8001104 <HAL_GPIO_Init>
}
 8000a7e:	bf00      	nop
 8000a80:	3728      	adds	r7, #40	; 0x28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	40023800 	.word	0x40023800
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40000800 	.word	0x40000800
 8000a98:	40020400 	.word	0x40020400

08000a9c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000aa0:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa2:	4a12      	ldr	r2, [pc, #72]	; (8000aec <MX_USART2_UART_Init+0x50>)
 8000aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000aa6:	4b10      	ldr	r3, [pc, #64]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ab4:	4b0c      	ldr	r3, [pc, #48]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aba:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000ac0:	4b09      	ldr	r3, [pc, #36]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac2:	2208      	movs	r2, #8
 8000ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac6:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_USART2_UART_Init+0x4c>)
 8000ad4:	f002 f80a 	bl	8002aec <HAL_UART_Init>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ade:	f7ff fde5 	bl	80006ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	200000a8 	.word	0x200000a8
 8000aec:	40004400 	.word	0x40004400

08000af0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08a      	sub	sp, #40	; 0x28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	2200      	movs	r2, #0
 8000afe:	601a      	str	r2, [r3, #0]
 8000b00:	605a      	str	r2, [r3, #4]
 8000b02:	609a      	str	r2, [r3, #8]
 8000b04:	60da      	str	r2, [r3, #12]
 8000b06:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a17      	ldr	r2, [pc, #92]	; (8000b6c <HAL_UART_MspInit+0x7c>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d127      	bne.n	8000b62 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b16:	4a16      	ldr	r2, [pc, #88]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b1c:	6253      	str	r3, [r2, #36]	; 0x24
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b26:	613b      	str	r3, [r7, #16]
 8000b28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a10      	ldr	r2, [pc, #64]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <HAL_UART_MspInit+0x80>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	; (8000b74 <HAL_UART_MspInit+0x84>)
 8000b5e:	f000 fad1 	bl	8001104 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	; 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <RX_ReadRaw>:
volatile bool rx_new_pulse[] = {false, false, false, false, false, false};
volatile unsigned long rx_pulse_begin[] = {0, 0, 0, 0, 0, 0};
volatile unsigned long rx_channel_width[] = {0, 0, 0, 0, 0, 0};

void RX_ReadRaw(uint8_t state, uint8_t channel)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	460a      	mov	r2, r1
 8000b82:	71fb      	strb	r3, [r7, #7]
 8000b84:	4613      	mov	r3, r2
 8000b86:	71bb      	strb	r3, [r7, #6]
	if (state == RX_STATE_ACTIVE)
 8000b88:	79fb      	ldrb	r3, [r7, #7]
 8000b8a:	2b01      	cmp	r3, #1
 8000b8c:	d107      	bne.n	8000b9e <RX_ReadRaw+0x26>
	{
		rx_pulse_begin[channel] = micros();
 8000b8e:	79bc      	ldrb	r4, [r7, #6]
 8000b90:	f000 f8a0 	bl	8000cd4 <micros>
 8000b94:	4603      	mov	r3, r0
 8000b96:	4a0c      	ldr	r2, [pc, #48]	; (8000bc8 <RX_ReadRaw+0x50>)
 8000b98:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	else
	{
		rx_channel_width[channel] = micros() - rx_pulse_begin[channel];
		rx_new_pulse[channel] = true;
	}
}
 8000b9c:	e00f      	b.n	8000bbe <RX_ReadRaw+0x46>
		rx_channel_width[channel] = micros() - rx_pulse_begin[channel];
 8000b9e:	f000 f899 	bl	8000cd4 <micros>
 8000ba2:	4601      	mov	r1, r0
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	4a08      	ldr	r2, [pc, #32]	; (8000bc8 <RX_ReadRaw+0x50>)
 8000ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000bac:	79bb      	ldrb	r3, [r7, #6]
 8000bae:	1a8a      	subs	r2, r1, r2
 8000bb0:	4906      	ldr	r1, [pc, #24]	; (8000bcc <RX_ReadRaw+0x54>)
 8000bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		rx_new_pulse[channel] = true;
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	4a05      	ldr	r2, [pc, #20]	; (8000bd0 <RX_ReadRaw+0x58>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	54d1      	strb	r1, [r2, r3]
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd90      	pop	{r4, r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200000f8 	.word	0x200000f8
 8000bcc:	20000110 	.word	0x20000110
 8000bd0:	200000f0 	.word	0x200000f0

08000bd4 <map>:
//__STATIC_INLINE uint32_t micros(void){
//	return  DWT->CYCCNT / (SystemCoreClock / 1000000U);
//}

__STATIC_INLINE long map(long x, long in_min, long in_max, long out_min, long out_max)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
 8000be0:	603b      	str	r3, [r7, #0]
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	1ad3      	subs	r3, r2, r3
 8000be8:	69b9      	ldr	r1, [r7, #24]
 8000bea:	683a      	ldr	r2, [r7, #0]
 8000bec:	1a8a      	subs	r2, r1, r2
 8000bee:	fb03 f202 	mul.w	r2, r3, r2
 8000bf2:	6879      	ldr	r1, [r7, #4]
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	1acb      	subs	r3, r1, r3
 8000bf8:	fb92 f2f3 	sdiv	r2, r2, r3
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	4413      	add	r3, r2
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
	...

08000c0c <SERVO_writeMicroseconds>:
};

struct SERVO_Params params;

void SERVO_writeMicroseconds(int value)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	if (value < MIN_PULSE_WIDTH)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8000c1a:	da03      	bge.n	8000c24 <SERVO_writeMicroseconds+0x18>
	{
		value = MIN_PULSE_WIDTH;
 8000c1c:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000c20:	607b      	str	r3, [r7, #4]
 8000c22:	e006      	b.n	8000c32 <SERVO_writeMicroseconds+0x26>
	}
	else if (value > MAX_PULSE_WIDTH)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000c2a:	dd02      	ble.n	8000c32 <SERVO_writeMicroseconds+0x26>
	{
		value = MAX_PULSE_WIDTH;
 8000c2c:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000c30:	607b      	str	r3, [r7, #4]
	}
	__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, value);
 8000c32:	4b04      	ldr	r3, [pc, #16]	; (8000c44 <SERVO_writeMicroseconds+0x38>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bc80      	pop	{r7}
 8000c42:	4770      	bx	lr
 8000c44:	20000028 	.word	0x20000028

08000c48 <SERVO_write>:

void SERVO_write(int value)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	6078      	str	r0, [r7, #4]
	if (value < MIN_PULSE_WIDTH)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	f5b3 7f08 	cmp.w	r3, #544	; 0x220
 8000c56:	da0a      	bge.n	8000c6e <SERVO_write+0x26>
	{
		if (value < 0)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	da02      	bge.n	8000c64 <SERVO_write+0x1c>
		{
			value = 0;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	607b      	str	r3, [r7, #4]
 8000c62:	e004      	b.n	8000c6e <SERVO_write+0x26>
		}
		else if (value > 180)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2bb4      	cmp	r3, #180	; 0xb4
 8000c68:	dd01      	ble.n	8000c6e <SERVO_write+0x26>
		{
			value = 180;
 8000c6a:	23b4      	movs	r3, #180	; 0xb4
 8000c6c:	607b      	str	r3, [r7, #4]
		}
	}
	value = map(value, 0, 180, MIN_PULSE_WIDTH, MAX_PULSE_WIDTH);
 8000c6e:	f44f 6316 	mov.w	r3, #2400	; 0x960
 8000c72:	9300      	str	r3, [sp, #0]
 8000c74:	f44f 7308 	mov.w	r3, #544	; 0x220
 8000c78:	22b4      	movs	r2, #180	; 0xb4
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffa9 	bl	8000bd4 <map>
 8000c82:	6078      	str	r0, [r7, #4]
	SERVO_writeMicroseconds(value);
 8000c84:	6878      	ldr	r0, [r7, #4]
 8000c86:	f7ff ffc1 	bl	8000c0c <SERVO_writeMicroseconds>
}
 8000c8a:	bf00      	nop
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <SERVO_attach>:

void SERVO_attach(uint8_t name_srv, int value)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	6039      	str	r1, [r7, #0]
 8000c9e:	71fb      	strb	r3, [r7, #7]
	params.ServoCount ++;
 8000ca0:	4b0b      	ldr	r3, [pc, #44]	; (8000cd0 <SERVO_attach+0x3c>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	4b09      	ldr	r3, [pc, #36]	; (8000cd0 <SERVO_attach+0x3c>)
 8000caa:	701a      	strb	r2, [r3, #0]
	if (params.ServoCount < MAX_SERVOS)
 8000cac:	4b08      	ldr	r3, [pc, #32]	; (8000cd0 <SERVO_attach+0x3c>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b0b      	cmp	r3, #11
 8000cb2:	d806      	bhi.n	8000cc2 <SERVO_attach+0x2e>
	{
		SERVO_write(value);
 8000cb4:	6838      	ldr	r0, [r7, #0]
 8000cb6:	f7ff ffc7 	bl	8000c48 <SERVO_write>
		params.ServoValidValue = VALID_SERVO;
 8000cba:	4b05      	ldr	r3, [pc, #20]	; (8000cd0 <SERVO_attach+0x3c>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	705a      	strb	r2, [r3, #1]
	}
	else
	{
		params.ServoValidValue = INVALID_SERVO;
	}
}
 8000cc0:	e002      	b.n	8000cc8 <SERVO_attach+0x34>
		params.ServoValidValue = INVALID_SERVO;
 8000cc2:	4b03      	ldr	r3, [pc, #12]	; (8000cd0 <SERVO_attach+0x3c>)
 8000cc4:	22ff      	movs	r2, #255	; 0xff
 8000cc6:	705a      	strb	r2, [r3, #1]
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000128 	.word	0x20000128

08000cd4 <micros>:
/**
 * Get micro-seconds function
 * Using the same function in STM32duino
 */
uint32_t micros(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b086      	sub	sp, #24
 8000cd8:	af00      	add	r7, sp, #0
	  uint32_t m0 = HAL_GetTick();
 8000cda:	f000 f8fb 	bl	8000ed4 <HAL_GetTick>
 8000cde:	6178      	str	r0, [r7, #20]
	  volatile uint32_t u0 = SysTick->VAL;
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <micros+0x78>)
 8000ce2:	689b      	ldr	r3, [r3, #8]
 8000ce4:	60bb      	str	r3, [r7, #8]
	  uint32_t m1 = HAL_GetTick();
 8000ce6:	f000 f8f5 	bl	8000ed4 <HAL_GetTick>
 8000cea:	6138      	str	r0, [r7, #16]
	  volatile uint32_t u1 = SysTick->VAL;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <micros+0x78>)
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	607b      	str	r3, [r7, #4]
	  const uint32_t tms = SysTick->LOAD + 1;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <micros+0x78>)
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	60fb      	str	r3, [r7, #12]

	  if (m1 != m0) {
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	429a      	cmp	r2, r3
 8000d00:	d010      	beq.n	8000d24 <micros+0x50>
	    return (m1 * 1000 + ((tms - u1) * 1000) / tms);
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d08:	fb03 f202 	mul.w	r2, r3, r2
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	68f9      	ldr	r1, [r7, #12]
 8000d10:	1acb      	subs	r3, r1, r3
 8000d12:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d16:	fb03 f101 	mul.w	r1, r3, r1
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d20:	4413      	add	r3, r2
 8000d22:	e00f      	b.n	8000d44 <micros+0x70>
	  } else {
	    return (m0 * 1000 + ((tms - u0) * 1000) / tms);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2a:	fb03 f202 	mul.w	r2, r3, r2
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	68f9      	ldr	r1, [r7, #12]
 8000d32:	1acb      	subs	r3, r1, r3
 8000d34:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d38:	fb03 f101 	mul.w	r1, r3, r1
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d42:	4413      	add	r3, r2
	  }
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3718      	adds	r7, #24
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	e000e010 	.word	0xe000e010

08000d50 <yield>:

/**
 * Support function to do delay time
 */
static void __empty()
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  // Empty
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <getCurrentMillis>:

/**
 * Get milli-seconds function
 */
static uint32_t getCurrentMillis(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8000d60:	f000 f8b8 	bl	8000ed4 <HAL_GetTick>
 8000d64:	4603      	mov	r3, r0
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}

08000d6a <delay>:
 * delay function
 * Using the same function in STM32duino
 * This function provides more exact delay time than HAL_Delay()
 */
void delay(uint32_t ms)
{
 8000d6a:	b580      	push	{r7, lr}
 8000d6c:	b084      	sub	sp, #16
 8000d6e:	af00      	add	r7, sp, #0
 8000d70:	6078      	str	r0, [r7, #4]
  if (ms != 0) {
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d00c      	beq.n	8000d92 <delay+0x28>
    uint32_t start = getCurrentMillis();
 8000d78:	f7ff fff0 	bl	8000d5c <getCurrentMillis>
 8000d7c:	60f8      	str	r0, [r7, #12]
    do {
      yield();
 8000d7e:	f7ff ffe7 	bl	8000d50 <yield>
    } while (getCurrentMillis() - start < ms);
 8000d82:	f7ff ffeb 	bl	8000d5c <getCurrentMillis>
 8000d86:	4602      	mov	r2, r0
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	1ad3      	subs	r3, r2, r3
 8000d8c:	687a      	ldr	r2, [r7, #4]
 8000d8e:	429a      	cmp	r2, r3
 8000d90:	d8f5      	bhi.n	8000d7e <delay+0x14>
  }
}
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <analogWrite>:
 * Using the same function but different code in STM32duino
 * This function exports PWM to a dedicated pin
 * @value: [percentage] unit
 */
void analogWrite(uint8_t value)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
	uint16_t val_tim = (value / 100) * 2000 * (1 / 10);
 8000da6:	2300      	movs	r3, #0
 8000da8:	81fb      	strh	r3, [r7, #14]
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, val_tim);
 8000daa:	4b04      	ldr	r3, [pc, #16]	; (8000dbc <analogWrite+0x20>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	89fa      	ldrh	r2, [r7, #14]
 8000db0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000db2:	bf00      	nop
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bc80      	pop	{r7}
 8000dba:	4770      	bx	lr
 8000dbc:	20000068 	.word	0x20000068

08000dc0 <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dc0:	f7ff fced 	bl	800079e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480b      	ldr	r0, [pc, #44]	; (8000df4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000dc6:	490c      	ldr	r1, [pc, #48]	; (8000df8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000dc8:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <LoopFillZerobss+0x16>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a09      	ldr	r2, [pc, #36]	; (8000e00 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000ddc:	4c09      	ldr	r4, [pc, #36]	; (8000e04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dea:	f001 ffbb 	bl	8002d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fbc1 	bl	8000574 <main>
  bx lr
 8000df2:	4770      	bx	lr
  ldr r0, =_sdata
 8000df4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000dfc:	08002df8 	.word	0x08002df8
  ldr r2, =_sbss
 8000e00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000e04:	20000130 	.word	0x20000130

08000e08 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e08:	e7fe      	b.n	8000e08 <ADC1_IRQHandler>

08000e0a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e0a:	b580      	push	{r7, lr}
 8000e0c:	b082      	sub	sp, #8
 8000e0e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e10:	2300      	movs	r3, #0
 8000e12:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f933 	bl	8001080 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 f80e 	bl	8000e3c <HAL_InitTick>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d002      	beq.n	8000e2c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	71fb      	strb	r3, [r7, #7]
 8000e2a:	e001      	b.n	8000e30 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e2c:	f7ff fc44 	bl	80006b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e30:	79fb      	ldrb	r3, [r7, #7]
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e44:	2300      	movs	r3, #0
 8000e46:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000e48:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <HAL_InitTick+0x68>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d022      	beq.n	8000e96 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000e50:	4b15      	ldr	r3, [pc, #84]	; (8000ea8 <HAL_InitTick+0x6c>)
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <HAL_InitTick+0x68>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000e5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8000e60:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e64:	4618      	mov	r0, r3
 8000e66:	f000 f940 	bl	80010ea <HAL_SYSTICK_Config>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d10f      	bne.n	8000e90 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	d809      	bhi.n	8000e8a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e76:	2200      	movs	r2, #0
 8000e78:	6879      	ldr	r1, [r7, #4]
 8000e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7e:	f000 f90a 	bl	8001096 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <HAL_InitTick+0x70>)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6013      	str	r3, [r2, #0]
 8000e88:	e007      	b.n	8000e9a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	73fb      	strb	r3, [r7, #15]
 8000e8e:	e004      	b.n	8000e9a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	73fb      	strb	r3, [r7, #15]
 8000e94:	e001      	b.n	8000e9a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	20000004 	.word	0x20000004

08000eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <HAL_IncTick+0x1c>)
 8000eb6:	681a      	ldr	r2, [r3, #0]
 8000eb8:	4b05      	ldr	r3, [pc, #20]	; (8000ed0 <HAL_IncTick+0x20>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4413      	add	r3, r2
 8000ebe:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <HAL_IncTick+0x1c>)
 8000ec0:	6013      	str	r3, [r2, #0]
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bc80      	pop	{r7}
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	2000012c 	.word	0x2000012c
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ed8:	4b02      	ldr	r3, [pc, #8]	; (8000ee4 <HAL_GetTick+0x10>)
 8000eda:	681b      	ldr	r3, [r3, #0]
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	2000012c 	.word	0x2000012c

08000ee8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efe:	68ba      	ldr	r2, [r7, #8]
 8000f00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f04:	4013      	ands	r3, r2
 8000f06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f0c:	68bb      	ldr	r3, [r7, #8]
 8000f0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f1a:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <__NVIC_SetPriorityGrouping+0x44>)
 8000f1c:	68bb      	ldr	r3, [r7, #8]
 8000f1e:	60d3      	str	r3, [r2, #12]
}
 8000f20:	bf00      	nop
 8000f22:	3714      	adds	r7, #20
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000ed00 	.word	0xe000ed00

08000f30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <__NVIC_GetPriorityGrouping+0x18>)
 8000f36:	68db      	ldr	r3, [r3, #12]
 8000f38:	0a1b      	lsrs	r3, r3, #8
 8000f3a:	f003 0307 	and.w	r3, r3, #7
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bc80      	pop	{r7}
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	e000ed00 	.word	0xe000ed00

08000f4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b083      	sub	sp, #12
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	db0b      	blt.n	8000f76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f003 021f 	and.w	r2, r3, #31
 8000f64:	4906      	ldr	r1, [pc, #24]	; (8000f80 <__NVIC_EnableIRQ+0x34>)
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	095b      	lsrs	r3, r3, #5
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bc80      	pop	{r7}
 8000f7e:	4770      	bx	lr
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b01      	subs	r3, #1
 8001048:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800104c:	d301      	bcc.n	8001052 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800104e:	2301      	movs	r3, #1
 8001050:	e00f      	b.n	8001072 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001052:	4a0a      	ldr	r2, [pc, #40]	; (800107c <SysTick_Config+0x40>)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	3b01      	subs	r3, #1
 8001058:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105a:	210f      	movs	r1, #15
 800105c:	f04f 30ff 	mov.w	r0, #4294967295
 8001060:	f7ff ff90 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001064:	4b05      	ldr	r3, [pc, #20]	; (800107c <SysTick_Config+0x40>)
 8001066:	2200      	movs	r2, #0
 8001068:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106a:	4b04      	ldr	r3, [pc, #16]	; (800107c <SysTick_Config+0x40>)
 800106c:	2207      	movs	r2, #7
 800106e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001070:	2300      	movs	r3, #0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	e000e010 	.word	0xe000e010

08001080 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff2d 	bl	8000ee8 <__NVIC_SetPriorityGrouping>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b086      	sub	sp, #24
 800109a:	af00      	add	r7, sp, #0
 800109c:	4603      	mov	r3, r0
 800109e:	60b9      	str	r1, [r7, #8]
 80010a0:	607a      	str	r2, [r7, #4]
 80010a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010a8:	f7ff ff42 	bl	8000f30 <__NVIC_GetPriorityGrouping>
 80010ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	68b9      	ldr	r1, [r7, #8]
 80010b2:	6978      	ldr	r0, [r7, #20]
 80010b4:	f7ff ff90 	bl	8000fd8 <NVIC_EncodePriority>
 80010b8:	4602      	mov	r2, r0
 80010ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010be:	4611      	mov	r1, r2
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff ff5f 	bl	8000f84 <__NVIC_SetPriority>
}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}

080010ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ce:	b580      	push	{r7, lr}
 80010d0:	b082      	sub	sp, #8
 80010d2:	af00      	add	r7, sp, #0
 80010d4:	4603      	mov	r3, r0
 80010d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff ff35 	bl	8000f4c <__NVIC_EnableIRQ>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b082      	sub	sp, #8
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffa2 	bl	800103c <SysTick_Config>
 80010f8:	4603      	mov	r3, r0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
	...

08001104 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001104:	b480      	push	{r7}
 8001106:	b087      	sub	sp, #28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800111a:	e160      	b.n	80013de <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	2101      	movs	r1, #1
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	4013      	ands	r3, r2
 800112a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2b00      	cmp	r3, #0
 8001130:	f000 8152 	beq.w	80013d8 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f003 0303 	and.w	r3, r3, #3
 800113c:	2b01      	cmp	r3, #1
 800113e:	d005      	beq.n	800114c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001148:	2b02      	cmp	r3, #2
 800114a:	d130      	bne.n	80011ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001152:	697b      	ldr	r3, [r7, #20]
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	2203      	movs	r2, #3
 8001158:	fa02 f303 	lsl.w	r3, r2, r3
 800115c:	43db      	mvns	r3, r3
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	4013      	ands	r3, r2
 8001162:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	68da      	ldr	r2, [r3, #12]
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	005b      	lsls	r3, r3, #1
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	693a      	ldr	r2, [r7, #16]
 800117a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001182:	2201      	movs	r2, #1
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	fa02 f303 	lsl.w	r3, r2, r3
 800118a:	43db      	mvns	r3, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4013      	ands	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	091b      	lsrs	r3, r3, #4
 8001198:	f003 0201 	and.w	r2, r3, #1
 800119c:	697b      	ldr	r3, [r7, #20]
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	693a      	ldr	r2, [r7, #16]
 80011ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 0303 	and.w	r3, r3, #3
 80011b6:	2b03      	cmp	r3, #3
 80011b8:	d017      	beq.n	80011ea <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	68db      	ldr	r3, [r3, #12]
 80011be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2203      	movs	r2, #3
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689a      	ldr	r2, [r3, #8]
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b02      	cmp	r3, #2
 80011f4:	d123      	bne.n	800123e <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	08da      	lsrs	r2, r3, #3
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	3208      	adds	r2, #8
 80011fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001202:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	f003 0307 	and.w	r3, r3, #7
 800120a:	009b      	lsls	r3, r3, #2
 800120c:	220f      	movs	r2, #15
 800120e:	fa02 f303 	lsl.w	r3, r2, r3
 8001212:	43db      	mvns	r3, r3
 8001214:	693a      	ldr	r2, [r7, #16]
 8001216:	4013      	ands	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	691a      	ldr	r2, [r3, #16]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	693a      	ldr	r2, [r7, #16]
 800122c:	4313      	orrs	r3, r2
 800122e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	08da      	lsrs	r2, r3, #3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3208      	adds	r2, #8
 8001238:	6939      	ldr	r1, [r7, #16]
 800123a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	005b      	lsls	r3, r3, #1
 8001248:	2203      	movs	r2, #3
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f003 0203 	and.w	r2, r3, #3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	005b      	lsls	r3, r3, #1
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 80ac 	beq.w	80013d8 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001280:	4b5e      	ldr	r3, [pc, #376]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 8001282:	6a1b      	ldr	r3, [r3, #32]
 8001284:	4a5d      	ldr	r2, [pc, #372]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 8001286:	f043 0301 	orr.w	r3, r3, #1
 800128a:	6213      	str	r3, [r2, #32]
 800128c:	4b5b      	ldr	r3, [pc, #364]	; (80013fc <HAL_GPIO_Init+0x2f8>)
 800128e:	6a1b      	ldr	r3, [r3, #32]
 8001290:	f003 0301 	and.w	r3, r3, #1
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001298:	4a59      	ldr	r2, [pc, #356]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	089b      	lsrs	r3, r3, #2
 800129e:	3302      	adds	r3, #2
 80012a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a4:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	f003 0303 	and.w	r3, r3, #3
 80012ac:	009b      	lsls	r3, r3, #2
 80012ae:	220f      	movs	r2, #15
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	43db      	mvns	r3, r3
 80012b6:	693a      	ldr	r2, [r7, #16]
 80012b8:	4013      	ands	r3, r2
 80012ba:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	4a51      	ldr	r2, [pc, #324]	; (8001404 <HAL_GPIO_Init+0x300>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d025      	beq.n	8001310 <HAL_GPIO_Init+0x20c>
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a50      	ldr	r2, [pc, #320]	; (8001408 <HAL_GPIO_Init+0x304>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d01f      	beq.n	800130c <HAL_GPIO_Init+0x208>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4a4f      	ldr	r2, [pc, #316]	; (800140c <HAL_GPIO_Init+0x308>)
 80012d0:	4293      	cmp	r3, r2
 80012d2:	d019      	beq.n	8001308 <HAL_GPIO_Init+0x204>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a4e      	ldr	r2, [pc, #312]	; (8001410 <HAL_GPIO_Init+0x30c>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d013      	beq.n	8001304 <HAL_GPIO_Init+0x200>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a4d      	ldr	r2, [pc, #308]	; (8001414 <HAL_GPIO_Init+0x310>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d00d      	beq.n	8001300 <HAL_GPIO_Init+0x1fc>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a4c      	ldr	r2, [pc, #304]	; (8001418 <HAL_GPIO_Init+0x314>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d007      	beq.n	80012fc <HAL_GPIO_Init+0x1f8>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a4b      	ldr	r2, [pc, #300]	; (800141c <HAL_GPIO_Init+0x318>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d101      	bne.n	80012f8 <HAL_GPIO_Init+0x1f4>
 80012f4:	2306      	movs	r3, #6
 80012f6:	e00c      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 80012f8:	2307      	movs	r3, #7
 80012fa:	e00a      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 80012fc:	2305      	movs	r3, #5
 80012fe:	e008      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 8001300:	2304      	movs	r3, #4
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 8001304:	2303      	movs	r3, #3
 8001306:	e004      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 8001308:	2302      	movs	r3, #2
 800130a:	e002      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 800130c:	2301      	movs	r3, #1
 800130e:	e000      	b.n	8001312 <HAL_GPIO_Init+0x20e>
 8001310:	2300      	movs	r3, #0
 8001312:	697a      	ldr	r2, [r7, #20]
 8001314:	f002 0203 	and.w	r2, r2, #3
 8001318:	0092      	lsls	r2, r2, #2
 800131a:	4093      	lsls	r3, r2
 800131c:	693a      	ldr	r2, [r7, #16]
 800131e:	4313      	orrs	r3, r2
 8001320:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001322:	4937      	ldr	r1, [pc, #220]	; (8001400 <HAL_GPIO_Init+0x2fc>)
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	089b      	lsrs	r3, r3, #2
 8001328:	3302      	adds	r3, #2
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001330:	4b3b      	ldr	r3, [pc, #236]	; (8001420 <HAL_GPIO_Init+0x31c>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	43db      	mvns	r3, r3
 800133a:	693a      	ldr	r2, [r7, #16]
 800133c:	4013      	ands	r3, r2
 800133e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001348:	2b00      	cmp	r3, #0
 800134a:	d003      	beq.n	8001354 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	4313      	orrs	r3, r2
 8001352:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001354:	4a32      	ldr	r2, [pc, #200]	; (8001420 <HAL_GPIO_Init+0x31c>)
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800135a:	4b31      	ldr	r3, [pc, #196]	; (8001420 <HAL_GPIO_Init+0x31c>)
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001376:	693a      	ldr	r2, [r7, #16]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	4313      	orrs	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800137e:	4a28      	ldr	r2, [pc, #160]	; (8001420 <HAL_GPIO_Init+0x31c>)
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001384:	4b26      	ldr	r3, [pc, #152]	; (8001420 <HAL_GPIO_Init+0x31c>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	43db      	mvns	r3, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4013      	ands	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139c:	2b00      	cmp	r3, #0
 800139e:	d003      	beq.n	80013a8 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80013a8:	4a1d      	ldr	r2, [pc, #116]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	43db      	mvns	r3, r3
 80013b8:	693a      	ldr	r2, [r7, #16]
 80013ba:	4013      	ands	r3, r2
 80013bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	685b      	ldr	r3, [r3, #4]
 80013c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	4313      	orrs	r3, r2
 80013d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80013d2:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_GPIO_Init+0x31c>)
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681a      	ldr	r2, [r3, #0]
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	fa22 f303 	lsr.w	r3, r2, r3
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	f47f ae97 	bne.w	800111c <HAL_GPIO_Init+0x18>
  }
}
 80013ee:	bf00      	nop
 80013f0:	bf00      	nop
 80013f2:	371c      	adds	r7, #28
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	40023800 	.word	0x40023800
 8001400:	40010000 	.word	0x40010000
 8001404:	40020000 	.word	0x40020000
 8001408:	40020400 	.word	0x40020400
 800140c:	40020800 	.word	0x40020800
 8001410:	40020c00 	.word	0x40020c00
 8001414:	40021000 	.word	0x40021000
 8001418:	40021400 	.word	0x40021400
 800141c:	40021800 	.word	0x40021800
 8001420:	40010400 	.word	0x40010400

08001424 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	691a      	ldr	r2, [r3, #16]
 8001434:	887b      	ldrh	r3, [r7, #2]
 8001436:	4013      	ands	r3, r2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800143c:	2301      	movs	r3, #1
 800143e:	73fb      	strb	r3, [r7, #15]
 8001440:	e001      	b.n	8001446 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001442:	2300      	movs	r3, #0
 8001444:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001446:	7bfb      	ldrb	r3, [r7, #15]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	bc80      	pop	{r7}
 8001450:	4770      	bx	lr

08001452 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001452:	b480      	push	{r7}
 8001454:	b083      	sub	sp, #12
 8001456:	af00      	add	r7, sp, #0
 8001458:	6078      	str	r0, [r7, #4]
 800145a:	460b      	mov	r3, r1
 800145c:	807b      	strh	r3, [r7, #2]
 800145e:	4613      	mov	r3, r2
 8001460:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001462:	787b      	ldrb	r3, [r7, #1]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d003      	beq.n	8001470 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001468:	887a      	ldrh	r2, [r7, #2]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800146e:	e003      	b.n	8001478 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	041a      	lsls	r2, r3, #16
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	619a      	str	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr
	...

08001484 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001490:	695a      	ldr	r2, [r3, #20]
 8001492:	88fb      	ldrh	r3, [r7, #6]
 8001494:	4013      	ands	r3, r2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d006      	beq.n	80014a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800149c:	88fb      	ldrh	r3, [r7, #6]
 800149e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014a0:	88fb      	ldrh	r3, [r7, #6]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff f8e2 	bl	800066c <HAL_GPIO_EXTI_Callback>
  }
}
 80014a8:	bf00      	nop
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40010400 	.word	0x40010400

080014b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b088      	sub	sp, #32
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d101      	bne.n	80014c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
 80014c4:	e31d      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014c6:	4b94      	ldr	r3, [pc, #592]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80014c8:	689b      	ldr	r3, [r3, #8]
 80014ca:	f003 030c 	and.w	r3, r3, #12
 80014ce:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014d0:	4b91      	ldr	r3, [pc, #580]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d8:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d07b      	beq.n	80015de <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014e6:	69bb      	ldr	r3, [r7, #24]
 80014e8:	2b08      	cmp	r3, #8
 80014ea:	d006      	beq.n	80014fa <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014ec:	69bb      	ldr	r3, [r7, #24]
 80014ee:	2b0c      	cmp	r3, #12
 80014f0:	d10f      	bne.n	8001512 <HAL_RCC_OscConfig+0x5e>
 80014f2:	697b      	ldr	r3, [r7, #20]
 80014f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014f8:	d10b      	bne.n	8001512 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014fa:	4b87      	ldr	r3, [pc, #540]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d06a      	beq.n	80015dc <HAL_RCC_OscConfig+0x128>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d166      	bne.n	80015dc <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e2f7      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d106      	bne.n	8001528 <HAL_RCC_OscConfig+0x74>
 800151a:	4b7f      	ldr	r3, [pc, #508]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4a7e      	ldr	r2, [pc, #504]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001524:	6013      	str	r3, [r2, #0]
 8001526:	e02d      	b.n	8001584 <HAL_RCC_OscConfig+0xd0>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10c      	bne.n	800154a <HAL_RCC_OscConfig+0x96>
 8001530:	4b79      	ldr	r3, [pc, #484]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a78      	ldr	r2, [pc, #480]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001536:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800153a:	6013      	str	r3, [r2, #0]
 800153c:	4b76      	ldr	r3, [pc, #472]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a75      	ldr	r2, [pc, #468]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001542:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e01c      	b.n	8001584 <HAL_RCC_OscConfig+0xd0>
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	2b05      	cmp	r3, #5
 8001550:	d10c      	bne.n	800156c <HAL_RCC_OscConfig+0xb8>
 8001552:	4b71      	ldr	r3, [pc, #452]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a70      	ldr	r2, [pc, #448]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001558:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800155c:	6013      	str	r3, [r2, #0]
 800155e:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a6d      	ldr	r2, [pc, #436]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	e00b      	b.n	8001584 <HAL_RCC_OscConfig+0xd0>
 800156c:	4b6a      	ldr	r3, [pc, #424]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	4a69      	ldr	r2, [pc, #420]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001576:	6013      	str	r3, [r2, #0]
 8001578:	4b67      	ldr	r3, [pc, #412]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4a66      	ldr	r2, [pc, #408]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 800157e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d013      	beq.n	80015b4 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800158c:	f7ff fca2 	bl	8000ed4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001592:	e008      	b.n	80015a6 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001594:	f7ff fc9e 	bl	8000ed4 <HAL_GetTick>
 8001598:	4602      	mov	r2, r0
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	2b64      	cmp	r3, #100	; 0x64
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e2ad      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015a6:	4b5c      	ldr	r3, [pc, #368]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d0f0      	beq.n	8001594 <HAL_RCC_OscConfig+0xe0>
 80015b2:	e014      	b.n	80015de <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b4:	f7ff fc8e 	bl	8000ed4 <HAL_GetTick>
 80015b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ba:	e008      	b.n	80015ce <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015bc:	f7ff fc8a 	bl	8000ed4 <HAL_GetTick>
 80015c0:	4602      	mov	r2, r0
 80015c2:	693b      	ldr	r3, [r7, #16]
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	2b64      	cmp	r3, #100	; 0x64
 80015c8:	d901      	bls.n	80015ce <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 80015ca:	2303      	movs	r3, #3
 80015cc:	e299      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80015ce:	4b52      	ldr	r3, [pc, #328]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d1f0      	bne.n	80015bc <HAL_RCC_OscConfig+0x108>
 80015da:	e000      	b.n	80015de <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d05a      	beq.n	80016a0 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015ea:	69bb      	ldr	r3, [r7, #24]
 80015ec:	2b04      	cmp	r3, #4
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	2b0c      	cmp	r3, #12
 80015f4:	d119      	bne.n	800162a <HAL_RCC_OscConfig+0x176>
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d116      	bne.n	800162a <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fc:	4b46      	ldr	r3, [pc, #280]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0302 	and.w	r3, r3, #2
 8001604:	2b00      	cmp	r3, #0
 8001606:	d005      	beq.n	8001614 <HAL_RCC_OscConfig+0x160>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b01      	cmp	r3, #1
 800160e:	d001      	beq.n	8001614 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8001610:	2301      	movs	r3, #1
 8001612:	e276      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b40      	ldr	r3, [pc, #256]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	493d      	ldr	r1, [pc, #244]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001628:	e03a      	b.n	80016a0 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d020      	beq.n	8001674 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001632:	4b3a      	ldr	r3, [pc, #232]	; (800171c <HAL_RCC_OscConfig+0x268>)
 8001634:	2201      	movs	r2, #1
 8001636:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001638:	f7ff fc4c 	bl	8000ed4 <HAL_GetTick>
 800163c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163e:	e008      	b.n	8001652 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001640:	f7ff fc48 	bl	8000ed4 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	693b      	ldr	r3, [r7, #16]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	2b02      	cmp	r3, #2
 800164c:	d901      	bls.n	8001652 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800164e:	2303      	movs	r3, #3
 8001650:	e257      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001652:	4b31      	ldr	r3, [pc, #196]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f003 0302 	and.w	r3, r3, #2
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f0      	beq.n	8001640 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800165e:	4b2e      	ldr	r3, [pc, #184]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	021b      	lsls	r3, r3, #8
 800166c:	492a      	ldr	r1, [pc, #168]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 800166e:	4313      	orrs	r3, r2
 8001670:	604b      	str	r3, [r1, #4]
 8001672:	e015      	b.n	80016a0 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001674:	4b29      	ldr	r3, [pc, #164]	; (800171c <HAL_RCC_OscConfig+0x268>)
 8001676:	2200      	movs	r2, #0
 8001678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fc2b 	bl	8000ed4 <HAL_GetTick>
 800167e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001680:	e008      	b.n	8001694 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001682:	f7ff fc27 	bl	8000ed4 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	2b02      	cmp	r3, #2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e236      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001694:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d1f0      	bne.n	8001682 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f003 0310 	and.w	r3, r3, #16
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80b8 	beq.w	800181e <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d170      	bne.n	8001796 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b4:	4b18      	ldr	r3, [pc, #96]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d005      	beq.n	80016cc <HAL_RCC_OscConfig+0x218>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	699b      	ldr	r3, [r3, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
 80016ca:	e21a      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a1a      	ldr	r2, [r3, #32]
 80016d0:	4b11      	ldr	r3, [pc, #68]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80016d8:	429a      	cmp	r2, r3
 80016da:	d921      	bls.n	8001720 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f000 fc7d 	bl	8001fe0 <RCC_SetFlashLatencyFromMSIRange>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e208      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a1b      	ldr	r3, [r3, #32]
 80016fc:	4906      	ldr	r1, [pc, #24]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001702:	4b05      	ldr	r3, [pc, #20]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69db      	ldr	r3, [r3, #28]
 800170e:	061b      	lsls	r3, r3, #24
 8001710:	4901      	ldr	r1, [pc, #4]	; (8001718 <HAL_RCC_OscConfig+0x264>)
 8001712:	4313      	orrs	r3, r2
 8001714:	604b      	str	r3, [r1, #4]
 8001716:	e020      	b.n	800175a <HAL_RCC_OscConfig+0x2a6>
 8001718:	40023800 	.word	0x40023800
 800171c:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001720:	4b99      	ldr	r3, [pc, #612]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6a1b      	ldr	r3, [r3, #32]
 800172c:	4996      	ldr	r1, [pc, #600]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800172e:	4313      	orrs	r3, r2
 8001730:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001732:	4b95      	ldr	r3, [pc, #596]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	69db      	ldr	r3, [r3, #28]
 800173e:	061b      	lsls	r3, r3, #24
 8001740:	4991      	ldr	r1, [pc, #580]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001742:	4313      	orrs	r3, r2
 8001744:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a1b      	ldr	r3, [r3, #32]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fc48 	bl	8001fe0 <RCC_SetFlashLatencyFromMSIRange>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e1d3      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
 800175e:	0b5b      	lsrs	r3, r3, #13
 8001760:	3301      	adds	r3, #1
 8001762:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800176a:	4a87      	ldr	r2, [pc, #540]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800176c:	6892      	ldr	r2, [r2, #8]
 800176e:	0912      	lsrs	r2, r2, #4
 8001770:	f002 020f 	and.w	r2, r2, #15
 8001774:	4985      	ldr	r1, [pc, #532]	; (800198c <HAL_RCC_OscConfig+0x4d8>)
 8001776:	5c8a      	ldrb	r2, [r1, r2]
 8001778:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800177a:	4a85      	ldr	r2, [pc, #532]	; (8001990 <HAL_RCC_OscConfig+0x4dc>)
 800177c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800177e:	4b85      	ldr	r3, [pc, #532]	; (8001994 <HAL_RCC_OscConfig+0x4e0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff fb5a 	bl	8000e3c <HAL_InitTick>
 8001788:	4603      	mov	r3, r0
 800178a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800178c:	7bfb      	ldrb	r3, [r7, #15]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d045      	beq.n	800181e <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
 8001794:	e1b5      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d029      	beq.n	80017f2 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800179e:	4b7e      	ldr	r3, [pc, #504]	; (8001998 <HAL_RCC_OscConfig+0x4e4>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a4:	f7ff fb96 	bl	8000ed4 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017ac:	f7ff fb92 	bl	8000ed4 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e1a1      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d0f0      	beq.n	80017ac <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	496c      	ldr	r1, [pc, #432]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017d8:	4313      	orrs	r3, r2
 80017da:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017dc:	4b6a      	ldr	r3, [pc, #424]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	69db      	ldr	r3, [r3, #28]
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	4967      	ldr	r1, [pc, #412]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	e015      	b.n	800181e <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017f2:	4b69      	ldr	r3, [pc, #420]	; (8001998 <HAL_RCC_OscConfig+0x4e4>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017f8:	f7ff fb6c 	bl	8000ed4 <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001800:	f7ff fb68 	bl	8000ed4 <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e177      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001812:	4b5d      	ldr	r3, [pc, #372]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181a:	2b00      	cmp	r3, #0
 800181c:	d1f0      	bne.n	8001800 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0308 	and.w	r3, r3, #8
 8001826:	2b00      	cmp	r3, #0
 8001828:	d030      	beq.n	800188c <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d016      	beq.n	8001860 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001832:	4b5a      	ldr	r3, [pc, #360]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001834:	2201      	movs	r2, #1
 8001836:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001838:	f7ff fb4c 	bl	8000ed4 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001840:	f7ff fb48 	bl	8000ed4 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e157      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001852:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001854:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x38c>
 800185e:	e015      	b.n	800188c <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001860:	4b4e      	ldr	r3, [pc, #312]	; (800199c <HAL_RCC_OscConfig+0x4e8>)
 8001862:	2200      	movs	r2, #0
 8001864:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff fb35 	bl	8000ed4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800186e:	f7ff fb31 	bl	8000ed4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e140      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001880:	4b41      	ldr	r3, [pc, #260]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1f0      	bne.n	800186e <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 0304 	and.w	r3, r3, #4
 8001894:	2b00      	cmp	r3, #0
 8001896:	f000 80b5 	beq.w	8001a04 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800189a:	2300      	movs	r3, #0
 800189c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800189e:	4b3a      	ldr	r3, [pc, #232]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80018a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d10d      	bne.n	80018c6 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b37      	ldr	r3, [pc, #220]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	4a36      	ldr	r2, [pc, #216]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6253      	str	r3, [r2, #36]	; 0x24
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 80018b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018c2:	2301      	movs	r3, #1
 80018c4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c6:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d118      	bne.n	8001904 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 80018d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018de:	f7ff faf9 	bl	8000ed4 <HAL_GetTick>
 80018e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e4:	e008      	b.n	80018f8 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e6:	f7ff faf5 	bl	8000ed4 <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	2b64      	cmp	r3, #100	; 0x64
 80018f2:	d901      	bls.n	80018f8 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80018f4:	2303      	movs	r3, #3
 80018f6:	e104      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f8:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_RCC_OscConfig+0x4ec>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d0f0      	beq.n	80018e6 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b01      	cmp	r3, #1
 800190a:	d106      	bne.n	800191a <HAL_RCC_OscConfig+0x466>
 800190c:	4b1e      	ldr	r3, [pc, #120]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001910:	4a1d      	ldr	r2, [pc, #116]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001916:	6353      	str	r3, [r2, #52]	; 0x34
 8001918:	e02d      	b.n	8001976 <HAL_RCC_OscConfig+0x4c2>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d10c      	bne.n	800193c <HAL_RCC_OscConfig+0x488>
 8001922:	4b19      	ldr	r3, [pc, #100]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001926:	4a18      	ldr	r2, [pc, #96]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001928:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800192c:	6353      	str	r3, [r2, #52]	; 0x34
 800192e:	4b16      	ldr	r3, [pc, #88]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001930:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001932:	4a15      	ldr	r2, [pc, #84]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001934:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001938:	6353      	str	r3, [r2, #52]	; 0x34
 800193a:	e01c      	b.n	8001976 <HAL_RCC_OscConfig+0x4c2>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	2b05      	cmp	r3, #5
 8001942:	d10c      	bne.n	800195e <HAL_RCC_OscConfig+0x4aa>
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001948:	4a0f      	ldr	r2, [pc, #60]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800194a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800194e:	6353      	str	r3, [r2, #52]	; 0x34
 8001950:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001956:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195a:	6353      	str	r3, [r2, #52]	; 0x34
 800195c:	e00b      	b.n	8001976 <HAL_RCC_OscConfig+0x4c2>
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001962:	4a09      	ldr	r2, [pc, #36]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001964:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001968:	6353      	str	r3, [r2, #52]	; 0x34
 800196a:	4b07      	ldr	r3, [pc, #28]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	4a06      	ldr	r2, [pc, #24]	; (8001988 <HAL_RCC_OscConfig+0x4d4>)
 8001970:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001974:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d024      	beq.n	80019c8 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800197e:	f7ff faa9 	bl	8000ed4 <HAL_GetTick>
 8001982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001984:	e019      	b.n	80019ba <HAL_RCC_OscConfig+0x506>
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	08002dd0 	.word	0x08002dd0
 8001990:	20000000 	.word	0x20000000
 8001994:	20000004 	.word	0x20000004
 8001998:	42470020 	.word	0x42470020
 800199c:	42470680 	.word	0x42470680
 80019a0:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fa96 	bl	8000ed4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0a3      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019ba:	4b54      	ldr	r3, [pc, #336]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d0ee      	beq.n	80019a4 <HAL_RCC_OscConfig+0x4f0>
 80019c6:	e014      	b.n	80019f2 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019c8:	f7ff fa84 	bl	8000ed4 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019ce:	e00a      	b.n	80019e6 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019d0:	f7ff fa80 	bl	8000ed4 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	f241 3288 	movw	r2, #5000	; 0x1388
 80019de:	4293      	cmp	r3, r2
 80019e0:	d901      	bls.n	80019e6 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80019e2:	2303      	movs	r3, #3
 80019e4:	e08d      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019e6:	4b49      	ldr	r3, [pc, #292]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 80019e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d1ee      	bne.n	80019d0 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019f2:	7ffb      	ldrb	r3, [r7, #31]
 80019f4:	2b01      	cmp	r3, #1
 80019f6:	d105      	bne.n	8001a04 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019f8:	4b44      	ldr	r3, [pc, #272]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 80019fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fc:	4a43      	ldr	r2, [pc, #268]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 80019fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a02:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d079      	beq.n	8001b00 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d056      	beq.n	8001ac0 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d13b      	bne.n	8001a92 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a1a:	4b3d      	ldr	r3, [pc, #244]	; (8001b10 <HAL_RCC_OscConfig+0x65c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a20:	f7ff fa58 	bl	8000ed4 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a28:	f7ff fa54 	bl	8000ed4 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e063      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a3a:	4b34      	ldr	r3, [pc, #208]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f0      	bne.n	8001a28 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a46:	4b31      	ldr	r3, [pc, #196]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	4319      	orrs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5c:	430b      	orrs	r3, r1
 8001a5e:	492b      	ldr	r1, [pc, #172]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 8001a60:	4313      	orrs	r3, r2
 8001a62:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a64:	4b2a      	ldr	r3, [pc, #168]	; (8001b10 <HAL_RCC_OscConfig+0x65c>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6a:	f7ff fa33 	bl	8000ed4 <HAL_GetTick>
 8001a6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a70:	e008      	b.n	8001a84 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a72:	f7ff fa2f 	bl	8000ed4 <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d901      	bls.n	8001a84 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8001a80:	2303      	movs	r3, #3
 8001a82:	e03e      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001a84:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0f0      	beq.n	8001a72 <HAL_RCC_OscConfig+0x5be>
 8001a90:	e036      	b.n	8001b00 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_RCC_OscConfig+0x65c>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7ff fa1c 	bl	8000ed4 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7ff fa18 	bl	8000ed4 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e027      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d1f0      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5ec>
 8001abe:	e01f      	b.n	8001b00 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e01a      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001acc:	4b0f      	ldr	r3, [pc, #60]	; (8001b0c <HAL_RCC_OscConfig+0x658>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001adc:	429a      	cmp	r2, r3
 8001ade:	d10d      	bne.n	8001afc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d106      	bne.n	8001afc <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e000      	b.n	8001b02 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8001b00:	2300      	movs	r3, #0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3720      	adds	r7, #32
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bd80      	pop	{r7, pc}
 8001b0a:	bf00      	nop
 8001b0c:	40023800 	.word	0x40023800
 8001b10:	42470060 	.word	0x42470060

08001b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e11a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b28:	4b8f      	ldr	r3, [pc, #572]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0301 	and.w	r3, r3, #1
 8001b30:	683a      	ldr	r2, [r7, #0]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d919      	bls.n	8001b6a <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d105      	bne.n	8001b48 <HAL_RCC_ClockConfig+0x34>
 8001b3c:	4b8a      	ldr	r3, [pc, #552]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a89      	ldr	r2, [pc, #548]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001b42:	f043 0304 	orr.w	r3, r3, #4
 8001b46:	6013      	str	r3, [r2, #0]
 8001b48:	4b87      	ldr	r3, [pc, #540]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f023 0201 	bic.w	r2, r3, #1
 8001b50:	4985      	ldr	r1, [pc, #532]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b58:	4b83      	ldr	r3, [pc, #524]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0301 	and.w	r3, r3, #1
 8001b60:	683a      	ldr	r2, [r7, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d001      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e0f9      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d008      	beq.n	8001b88 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b76:	4b7d      	ldr	r3, [pc, #500]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	497a      	ldr	r1, [pc, #488]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	f000 808e 	beq.w	8001cb2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d107      	bne.n	8001bae <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b9e:	4b73      	ldr	r3, [pc, #460]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d121      	bne.n	8001bee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e0d7      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b03      	cmp	r3, #3
 8001bb4:	d107      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001bb6:	4b6d      	ldr	r3, [pc, #436]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d115      	bne.n	8001bee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e0cb      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d107      	bne.n	8001bde <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001bce:	4b67      	ldr	r3, [pc, #412]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d109      	bne.n	8001bee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0bf      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bde:	4b63      	ldr	r3, [pc, #396]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e0b7      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bee:	4b5f      	ldr	r3, [pc, #380]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f023 0203 	bic.w	r2, r3, #3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	495c      	ldr	r1, [pc, #368]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c00:	f7ff f968 	bl	8000ed4 <HAL_GetTick>
 8001c04:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d112      	bne.n	8001c34 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c0e:	e00a      	b.n	8001c26 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c10:	f7ff f960 	bl	8000ed4 <HAL_GetTick>
 8001c14:	4602      	mov	r2, r0
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e09b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	f003 030c 	and.w	r3, r3, #12
 8001c2e:	2b08      	cmp	r3, #8
 8001c30:	d1ee      	bne.n	8001c10 <HAL_RCC_ClockConfig+0xfc>
 8001c32:	e03e      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d112      	bne.n	8001c62 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c3c:	e00a      	b.n	8001c54 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c3e:	f7ff f949 	bl	8000ed4 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d901      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8001c50:	2303      	movs	r3, #3
 8001c52:	e084      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c54:	4b45      	ldr	r3, [pc, #276]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f003 030c 	and.w	r3, r3, #12
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d1ee      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x12a>
 8001c60:	e027      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d11d      	bne.n	8001ca6 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7ff f932 	bl	8000ed4 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e06d      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c82:	4b3a      	ldr	r3, [pc, #232]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 030c 	and.w	r3, r3, #12
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d1ee      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x158>
 8001c8e:	e010      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c90:	f7ff f920 	bl	8000ed4 <HAL_GetTick>
 8001c94:	4602      	mov	r2, r0
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d901      	bls.n	8001ca6 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e05b      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ca6:	4b31      	ldr	r3, [pc, #196]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001ca8:	689b      	ldr	r3, [r3, #8]
 8001caa:	f003 030c 	and.w	r3, r3, #12
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1ee      	bne.n	8001c90 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb2:	4b2d      	ldr	r3, [pc, #180]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f003 0301 	and.w	r3, r3, #1
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d219      	bcs.n	8001cf4 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	2b01      	cmp	r3, #1
 8001cc4:	d105      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0x1be>
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a27      	ldr	r2, [pc, #156]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	4b25      	ldr	r3, [pc, #148]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f023 0201 	bic.w	r2, r3, #1
 8001cda:	4923      	ldr	r1, [pc, #140]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	4313      	orrs	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ce2:	4b21      	ldr	r3, [pc, #132]	; (8001d68 <HAL_RCC_ClockConfig+0x254>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	683a      	ldr	r2, [r7, #0]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d001      	beq.n	8001cf4 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	e034      	b.n	8001d5e <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d008      	beq.n	8001d12 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d00:	4b1a      	ldr	r3, [pc, #104]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	4917      	ldr	r1, [pc, #92]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f003 0308 	and.w	r3, r3, #8
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d009      	beq.n	8001d32 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d1e:	4b13      	ldr	r3, [pc, #76]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001d20:	689b      	ldr	r3, [r3, #8]
 8001d22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	00db      	lsls	r3, r3, #3
 8001d2c:	490f      	ldr	r1, [pc, #60]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d32:	f000 f823 	bl	8001d7c <HAL_RCC_GetSysClockFreq>
 8001d36:	4602      	mov	r2, r0
 8001d38:	4b0c      	ldr	r3, [pc, #48]	; (8001d6c <HAL_RCC_ClockConfig+0x258>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	091b      	lsrs	r3, r3, #4
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	490b      	ldr	r1, [pc, #44]	; (8001d70 <HAL_RCC_ClockConfig+0x25c>)
 8001d44:	5ccb      	ldrb	r3, [r1, r3]
 8001d46:	fa22 f303 	lsr.w	r3, r2, r3
 8001d4a:	4a0a      	ldr	r2, [pc, #40]	; (8001d74 <HAL_RCC_ClockConfig+0x260>)
 8001d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	; (8001d78 <HAL_RCC_ClockConfig+0x264>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff f872 	bl	8000e3c <HAL_InitTick>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40023c00 	.word	0x40023c00
 8001d6c:	40023800 	.word	0x40023800
 8001d70:	08002dd0 	.word	0x08002dd0
 8001d74:	20000000 	.word	0x20000000
 8001d78:	20000004 	.word	0x20000004

08001d7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d80:	b092      	sub	sp, #72	; 0x48
 8001d82:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001d84:	4b79      	ldr	r3, [pc, #484]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d8c:	f003 030c 	and.w	r3, r3, #12
 8001d90:	2b0c      	cmp	r3, #12
 8001d92:	d00d      	beq.n	8001db0 <HAL_RCC_GetSysClockFreq+0x34>
 8001d94:	2b0c      	cmp	r3, #12
 8001d96:	f200 80d5 	bhi.w	8001f44 <HAL_RCC_GetSysClockFreq+0x1c8>
 8001d9a:	2b04      	cmp	r3, #4
 8001d9c:	d002      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x28>
 8001d9e:	2b08      	cmp	r3, #8
 8001da0:	d003      	beq.n	8001daa <HAL_RCC_GetSysClockFreq+0x2e>
 8001da2:	e0cf      	b.n	8001f44 <HAL_RCC_GetSysClockFreq+0x1c8>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001da4:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x1f4>)
 8001da6:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001da8:	e0da      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001daa:	4b72      	ldr	r3, [pc, #456]	; (8001f74 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8001dac:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001dae:	e0d7      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001db0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001db2:	0c9b      	lsrs	r3, r3, #18
 8001db4:	f003 020f 	and.w	r2, r3, #15
 8001db8:	4b6f      	ldr	r3, [pc, #444]	; (8001f78 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8001dba:	5c9b      	ldrb	r3, [r3, r2]
 8001dbc:	63bb      	str	r3, [r7, #56]	; 0x38
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001dbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001dc0:	0d9b      	lsrs	r3, r3, #22
 8001dc2:	f003 0303 	and.w	r3, r3, #3
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001dca:	4b68      	ldr	r3, [pc, #416]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d05d      	beq.n	8001e92 <HAL_RCC_GetSysClockFreq+0x116>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4618      	mov	r0, r3
 8001ddc:	4611      	mov	r1, r2
 8001dde:	4604      	mov	r4, r0
 8001de0:	460d      	mov	r5, r1
 8001de2:	4622      	mov	r2, r4
 8001de4:	462b      	mov	r3, r5
 8001de6:	f04f 0000 	mov.w	r0, #0
 8001dea:	f04f 0100 	mov.w	r1, #0
 8001dee:	0159      	lsls	r1, r3, #5
 8001df0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df4:	0150      	lsls	r0, r2, #5
 8001df6:	4602      	mov	r2, r0
 8001df8:	460b      	mov	r3, r1
 8001dfa:	4621      	mov	r1, r4
 8001dfc:	1a51      	subs	r1, r2, r1
 8001dfe:	6139      	str	r1, [r7, #16]
 8001e00:	4629      	mov	r1, r5
 8001e02:	eb63 0301 	sbc.w	r3, r3, r1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	f04f 0200 	mov.w	r2, #0
 8001e0c:	f04f 0300 	mov.w	r3, #0
 8001e10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001e14:	4659      	mov	r1, fp
 8001e16:	018b      	lsls	r3, r1, #6
 8001e18:	4651      	mov	r1, sl
 8001e1a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e1e:	4651      	mov	r1, sl
 8001e20:	018a      	lsls	r2, r1, #6
 8001e22:	46d4      	mov	ip, sl
 8001e24:	ebb2 080c 	subs.w	r8, r2, ip
 8001e28:	4659      	mov	r1, fp
 8001e2a:	eb63 0901 	sbc.w	r9, r3, r1
 8001e2e:	f04f 0200 	mov.w	r2, #0
 8001e32:	f04f 0300 	mov.w	r3, #0
 8001e36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e42:	4690      	mov	r8, r2
 8001e44:	4699      	mov	r9, r3
 8001e46:	4623      	mov	r3, r4
 8001e48:	eb18 0303 	adds.w	r3, r8, r3
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	462b      	mov	r3, r5
 8001e50:	eb49 0303 	adc.w	r3, r9, r3
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	f04f 0300 	mov.w	r3, #0
 8001e5e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e62:	4629      	mov	r1, r5
 8001e64:	024b      	lsls	r3, r1, #9
 8001e66:	4620      	mov	r0, r4
 8001e68:	4629      	mov	r1, r5
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	ea43 53d4 	orr.w	r3, r3, r4, lsr #23
 8001e70:	4601      	mov	r1, r0
 8001e72:	024a      	lsls	r2, r1, #9
 8001e74:	4610      	mov	r0, r2
 8001e76:	4619      	mov	r1, r3
 8001e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e80:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e84:	f7fe f97a 	bl	800017c <__aeabi_uldivmod>
 8001e88:	4602      	mov	r2, r0
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	4613      	mov	r3, r2
 8001e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8001e90:	e055      	b.n	8001f3e <HAL_RCC_GetSysClockFreq+0x1c2>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001e94:	2200      	movs	r2, #0
 8001e96:	623b      	str	r3, [r7, #32]
 8001e98:	627a      	str	r2, [r7, #36]	; 0x24
 8001e9a:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e9e:	4642      	mov	r2, r8
 8001ea0:	464b      	mov	r3, r9
 8001ea2:	f04f 0000 	mov.w	r0, #0
 8001ea6:	f04f 0100 	mov.w	r1, #0
 8001eaa:	0159      	lsls	r1, r3, #5
 8001eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001eb0:	0150      	lsls	r0, r2, #5
 8001eb2:	4602      	mov	r2, r0
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	46c4      	mov	ip, r8
 8001eb8:	ebb2 0a0c 	subs.w	sl, r2, ip
 8001ebc:	4640      	mov	r0, r8
 8001ebe:	4649      	mov	r1, r9
 8001ec0:	468c      	mov	ip, r1
 8001ec2:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001ec6:	f04f 0200 	mov.w	r2, #0
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ed2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ed6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eda:	ebb2 040a 	subs.w	r4, r2, sl
 8001ede:	eb63 050b 	sbc.w	r5, r3, fp
 8001ee2:	f04f 0200 	mov.w	r2, #0
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	00eb      	lsls	r3, r5, #3
 8001eec:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ef0:	00e2      	lsls	r2, r4, #3
 8001ef2:	4614      	mov	r4, r2
 8001ef4:	461d      	mov	r5, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	18e3      	adds	r3, r4, r3
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	460b      	mov	r3, r1
 8001efe:	eb45 0303 	adc.w	r3, r5, r3
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	f04f 0200 	mov.w	r2, #0
 8001f08:	f04f 0300 	mov.w	r3, #0
 8001f0c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f10:	4629      	mov	r1, r5
 8001f12:	028b      	lsls	r3, r1, #10
 8001f14:	4620      	mov	r0, r4
 8001f16:	4629      	mov	r1, r5
 8001f18:	4604      	mov	r4, r0
 8001f1a:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001f1e:	4601      	mov	r1, r0
 8001f20:	028a      	lsls	r2, r1, #10
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f28:	2200      	movs	r2, #0
 8001f2a:	61bb      	str	r3, [r7, #24]
 8001f2c:	61fa      	str	r2, [r7, #28]
 8001f2e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f32:	f7fe f923 	bl	800017c <__aeabi_uldivmod>
 8001f36:	4602      	mov	r2, r0
 8001f38:	460b      	mov	r3, r1
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	647b      	str	r3, [r7, #68]	; 0x44
      }
      sysclockfreq = pllvco;
 8001f3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001f40:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001f42:	e00d      	b.n	8001f60 <HAL_RCC_GetSysClockFreq+0x1e4>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x1f0>)
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	0b5b      	lsrs	r3, r3, #13
 8001f4a:	f003 0307 	and.w	r3, r3, #7
 8001f4e:	633b      	str	r3, [r7, #48]	; 0x30
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f52:	3301      	adds	r3, #1
 8001f54:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	643b      	str	r3, [r7, #64]	; 0x40
      break;
 8001f5e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3748      	adds	r7, #72	; 0x48
 8001f66:	46bd      	mov	sp, r7
 8001f68:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	00f42400 	.word	0x00f42400
 8001f74:	007a1200 	.word	0x007a1200
 8001f78:	08002dc4 	.word	0x08002dc4

08001f7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f80:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <HAL_RCC_GetHCLKFreq+0x10>)
 8001f82:	681b      	ldr	r3, [r3, #0]
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	46bd      	mov	sp, r7
 8001f88:	bc80      	pop	{r7}
 8001f8a:	4770      	bx	lr
 8001f8c:	20000000 	.word	0x20000000

08001f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f94:	f7ff fff2 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0a1b      	lsrs	r3, r3, #8
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08002de0 	.word	0x08002de0

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fbc:	f7ff ffde 	bl	8001f7c <HAL_RCC_GetHCLKFreq>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	4b05      	ldr	r3, [pc, #20]	; (8001fd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4903      	ldr	r1, [pc, #12]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fce:	5ccb      	ldrb	r3, [r1, r3]
 8001fd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	08002de0 	.word	0x08002de0

08001fe0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001fe0:	b480      	push	{r7}
 8001fe2:	b087      	sub	sp, #28
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fe8:	2300      	movs	r3, #0
 8001fea:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001fec:	4b29      	ldr	r3, [pc, #164]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d12c      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff8:	4b26      	ldr	r3, [pc, #152]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002004:	4b24      	ldr	r3, [pc, #144]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	e016      	b.n	800203e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002014:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6253      	str	r3, [r2, #36]	; 0x24
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800201e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002028:	4b1b      	ldr	r3, [pc, #108]	; (8002098 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8002030:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002032:	4b18      	ldr	r3, [pc, #96]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8002038:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800203c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8002044:	d105      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800204c:	d101      	bne.n	8002052 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 800204e:	2301      	movs	r3, #1
 8002050:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	2b01      	cmp	r3, #1
 8002056:	d105      	bne.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0f      	ldr	r2, [pc, #60]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800205e:	f043 0304 	orr.w	r3, r3, #4
 8002062:	6013      	str	r3, [r2, #0]
 8002064:	4b0d      	ldr	r3, [pc, #52]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f023 0201 	bic.w	r2, r3, #1
 800206c:	490b      	ldr	r1, [pc, #44]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	4313      	orrs	r3, r2
 8002072:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002074:	4b09      	ldr	r3, [pc, #36]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	429a      	cmp	r2, r3
 8002080:	d001      	beq.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e000      	b.n	8002088 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	371c      	adds	r7, #28
 800208c:	46bd      	mov	sp, r7
 800208e:	bc80      	pop	{r7}
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	40007000 	.word	0x40007000
 800209c:	40023c00 	.word	0x40023c00

080020a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e031      	b.n	8002116 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d106      	bne.n	80020cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7fe fc58 	bl	800097c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2202      	movs	r2, #2
 80020d0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	3304      	adds	r3, #4
 80020dc:	4619      	mov	r1, r3
 80020de:	4610      	mov	r0, r2
 80020e0:	f000 fa86 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2201      	movs	r2, #1
 80020e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2201      	movs	r2, #1
 80020f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2201      	movs	r2, #1
 80020f8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2201      	movs	r2, #1
 8002100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2201      	movs	r2, #1
 8002110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002114:	2300      	movs	r3, #0
}
 8002116:	4618      	mov	r0, r3
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e031      	b.n	8002194 <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002136:	b2db      	uxtb	r3, r3
 8002138:	2b00      	cmp	r3, #0
 800213a:	d106      	bne.n	800214a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f000 f829 	bl	800219c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2202      	movs	r2, #2
 800214e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	3304      	adds	r3, #4
 800215a:	4619      	mov	r1, r3
 800215c:	4610      	mov	r0, r2
 800215e:	f000 fa47 	bl	80025f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	2201      	movs	r2, #1
 8002176:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2201      	movs	r2, #1
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2201      	movs	r2, #1
 800218e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80021a4:	bf00      	nop
 80021a6:	370c      	adds	r7, #12
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bc80      	pop	{r7}
 80021ac:	4770      	bx	lr
	...

080021b0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d109      	bne.n	80021d4 <HAL_TIM_PWM_Start+0x24>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	bf14      	ite	ne
 80021cc:	2301      	movne	r3, #1
 80021ce:	2300      	moveq	r3, #0
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	e022      	b.n	800221a <HAL_TIM_PWM_Start+0x6a>
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	2b04      	cmp	r3, #4
 80021d8:	d109      	bne.n	80021ee <HAL_TIM_PWM_Start+0x3e>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	bf14      	ite	ne
 80021e6:	2301      	movne	r3, #1
 80021e8:	2300      	moveq	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
 80021ec:	e015      	b.n	800221a <HAL_TIM_PWM_Start+0x6a>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b08      	cmp	r3, #8
 80021f2:	d109      	bne.n	8002208 <HAL_TIM_PWM_Start+0x58>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021fa:	b2db      	uxtb	r3, r3
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	bf14      	ite	ne
 8002200:	2301      	movne	r3, #1
 8002202:	2300      	moveq	r3, #0
 8002204:	b2db      	uxtb	r3, r3
 8002206:	e008      	b.n	800221a <HAL_TIM_PWM_Start+0x6a>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800220e:	b2db      	uxtb	r3, r3
 8002210:	2b01      	cmp	r3, #1
 8002212:	bf14      	ite	ne
 8002214:	2301      	movne	r3, #1
 8002216:	2300      	moveq	r3, #0
 8002218:	b2db      	uxtb	r3, r3
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e051      	b.n	80022c6 <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d104      	bne.n	8002232 <HAL_TIM_PWM_Start+0x82>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	2202      	movs	r2, #2
 800222c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8002230:	e013      	b.n	800225a <HAL_TIM_PWM_Start+0xaa>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b04      	cmp	r3, #4
 8002236:	d104      	bne.n	8002242 <HAL_TIM_PWM_Start+0x92>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2202      	movs	r2, #2
 800223c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8002240:	e00b      	b.n	800225a <HAL_TIM_PWM_Start+0xaa>
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	2b08      	cmp	r3, #8
 8002246:	d104      	bne.n	8002252 <HAL_TIM_PWM_Start+0xa2>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2202      	movs	r2, #2
 800224c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002250:	e003      	b.n	800225a <HAL_TIM_PWM_Start+0xaa>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2202      	movs	r2, #2
 8002256:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	2201      	movs	r2, #1
 8002260:	6839      	ldr	r1, [r7, #0]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fbbf 	bl	80029e6 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002270:	d00e      	beq.n	8002290 <HAL_TIM_PWM_Start+0xe0>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a16      	ldr	r2, [pc, #88]	; (80022d0 <HAL_TIM_PWM_Start+0x120>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d009      	beq.n	8002290 <HAL_TIM_PWM_Start+0xe0>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a14      	ldr	r2, [pc, #80]	; (80022d4 <HAL_TIM_PWM_Start+0x124>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_PWM_Start+0xe0>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a13      	ldr	r2, [pc, #76]	; (80022d8 <HAL_TIM_PWM_Start+0x128>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d111      	bne.n	80022b4 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	f003 0307 	and.w	r3, r3, #7
 800229a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2b06      	cmp	r3, #6
 80022a0:	d010      	beq.n	80022c4 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 0201 	orr.w	r2, r2, #1
 80022b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80022b2:	e007      	b.n	80022c4 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f042 0201 	orr.w	r2, r2, #1
 80022c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	4618      	mov	r0, r3
 80022c8:	3710      	adds	r7, #16
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	40000400 	.word	0x40000400
 80022d4:	40000800 	.word	0x40000800
 80022d8:	40010800 	.word	0x40010800

080022dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022e8:	2300      	movs	r3, #0
 80022ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e0ae      	b.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b0c      	cmp	r3, #12
 8002306:	f200 809f 	bhi.w	8002448 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800230a:	a201      	add	r2, pc, #4	; (adr r2, 8002310 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800230c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002310:	08002345 	.word	0x08002345
 8002314:	08002449 	.word	0x08002449
 8002318:	08002449 	.word	0x08002449
 800231c:	08002449 	.word	0x08002449
 8002320:	08002385 	.word	0x08002385
 8002324:	08002449 	.word	0x08002449
 8002328:	08002449 	.word	0x08002449
 800232c:	08002449 	.word	0x08002449
 8002330:	080023c7 	.word	0x080023c7
 8002334:	08002449 	.word	0x08002449
 8002338:	08002449 	.word	0x08002449
 800233c:	08002449 	.word	0x08002449
 8002340:	08002407 	.word	0x08002407
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	68b9      	ldr	r1, [r7, #8]
 800234a:	4618      	mov	r0, r3
 800234c:	f000 f9c0 	bl	80026d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	699a      	ldr	r2, [r3, #24]
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f042 0208 	orr.w	r2, r2, #8
 800235e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	699a      	ldr	r2, [r3, #24]
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f022 0204 	bic.w	r2, r2, #4
 800236e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	6999      	ldr	r1, [r3, #24]
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	68da      	ldr	r2, [r3, #12]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	430a      	orrs	r2, r1
 8002380:	619a      	str	r2, [r3, #24]
      break;
 8002382:	e064      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f9dc 	bl	8002748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	699a      	ldr	r2, [r3, #24]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800239e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	699a      	ldr	r2, [r3, #24]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	6999      	ldr	r1, [r3, #24]
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	021a      	lsls	r2, r3, #8
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	430a      	orrs	r2, r1
 80023c2:	619a      	str	r2, [r3, #24]
      break;
 80023c4:	e043      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	68b9      	ldr	r1, [r7, #8]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 f9f9 	bl	80027c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f042 0208 	orr.w	r2, r2, #8
 80023e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	69da      	ldr	r2, [r3, #28]
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f022 0204 	bic.w	r2, r2, #4
 80023f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	69d9      	ldr	r1, [r3, #28]
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	68da      	ldr	r2, [r3, #12]
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	61da      	str	r2, [r3, #28]
      break;
 8002404:	e023      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	68b9      	ldr	r1, [r7, #8]
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fa16 	bl	800283e <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	69da      	ldr	r2, [r3, #28]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	69d9      	ldr	r1, [r3, #28]
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	021a      	lsls	r2, r3, #8
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	61da      	str	r2, [r3, #28]
      break;
 8002446:	e002      	b.n	800244e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	75fb      	strb	r3, [r7, #23]
      break;
 800244c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	2200      	movs	r2, #0
 8002452:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_TIM_ConfigClockSource+0x1c>
 8002478:	2302      	movs	r3, #2
 800247a:	e0b4      	b.n	80025e6 <HAL_TIM_ConfigClockSource+0x186>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2202      	movs	r2, #2
 8002488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	689b      	ldr	r3, [r3, #8]
 8002492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800249a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b4:	d03e      	beq.n	8002534 <HAL_TIM_ConfigClockSource+0xd4>
 80024b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ba:	f200 8087 	bhi.w	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024c2:	f000 8086 	beq.w	80025d2 <HAL_TIM_ConfigClockSource+0x172>
 80024c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ca:	d87f      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024cc:	2b70      	cmp	r3, #112	; 0x70
 80024ce:	d01a      	beq.n	8002506 <HAL_TIM_ConfigClockSource+0xa6>
 80024d0:	2b70      	cmp	r3, #112	; 0x70
 80024d2:	d87b      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024d4:	2b60      	cmp	r3, #96	; 0x60
 80024d6:	d050      	beq.n	800257a <HAL_TIM_ConfigClockSource+0x11a>
 80024d8:	2b60      	cmp	r3, #96	; 0x60
 80024da:	d877      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024dc:	2b50      	cmp	r3, #80	; 0x50
 80024de:	d03c      	beq.n	800255a <HAL_TIM_ConfigClockSource+0xfa>
 80024e0:	2b50      	cmp	r3, #80	; 0x50
 80024e2:	d873      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024e4:	2b40      	cmp	r3, #64	; 0x40
 80024e6:	d058      	beq.n	800259a <HAL_TIM_ConfigClockSource+0x13a>
 80024e8:	2b40      	cmp	r3, #64	; 0x40
 80024ea:	d86f      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024ec:	2b30      	cmp	r3, #48	; 0x30
 80024ee:	d064      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 80024f0:	2b30      	cmp	r3, #48	; 0x30
 80024f2:	d86b      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024f4:	2b20      	cmp	r3, #32
 80024f6:	d060      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 80024f8:	2b20      	cmp	r3, #32
 80024fa:	d867      	bhi.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d05c      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 8002500:	2b10      	cmp	r3, #16
 8002502:	d05a      	beq.n	80025ba <HAL_TIM_ConfigClockSource+0x15a>
 8002504:	e062      	b.n	80025cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002516:	f000 fa47 	bl	80029a8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002528:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	609a      	str	r2, [r3, #8]
      break;
 8002532:	e04f      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002544:	f000 fa30 	bl	80029a8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	689a      	ldr	r2, [r3, #8]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002556:	609a      	str	r2, [r3, #8]
      break;
 8002558:	e03c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002566:	461a      	mov	r2, r3
 8002568:	f000 f9a7 	bl	80028ba <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2150      	movs	r1, #80	; 0x50
 8002572:	4618      	mov	r0, r3
 8002574:	f000 f9fe 	bl	8002974 <TIM_ITRx_SetConfig>
      break;
 8002578:	e02c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002586:	461a      	mov	r2, r3
 8002588:	f000 f9c5 	bl	8002916 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	2160      	movs	r1, #96	; 0x60
 8002592:	4618      	mov	r0, r3
 8002594:	f000 f9ee 	bl	8002974 <TIM_ITRx_SetConfig>
      break;
 8002598:	e01c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025a6:	461a      	mov	r2, r3
 80025a8:	f000 f987 	bl	80028ba <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	2140      	movs	r1, #64	; 0x40
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f9de 	bl	8002974 <TIM_ITRx_SetConfig>
      break;
 80025b8:	e00c      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	4610      	mov	r0, r2
 80025c6:	f000 f9d5 	bl	8002974 <TIM_ITRx_SetConfig>
      break;
 80025ca:	e003      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	73fb      	strb	r3, [r7, #15]
      break;
 80025d0:	e000      	b.n	80025d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80025d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return status;
 80025e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b085      	sub	sp, #20
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002606:	d00f      	beq.n	8002628 <TIM_Base_SetConfig+0x38>
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <TIM_Base_SetConfig+0xc8>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d00b      	beq.n	8002628 <TIM_Base_SetConfig+0x38>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	4a2a      	ldr	r2, [pc, #168]	; (80026bc <TIM_Base_SetConfig+0xcc>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d007      	beq.n	8002628 <TIM_Base_SetConfig+0x38>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	4a29      	ldr	r2, [pc, #164]	; (80026c0 <TIM_Base_SetConfig+0xd0>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d003      	beq.n	8002628 <TIM_Base_SetConfig+0x38>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a28      	ldr	r2, [pc, #160]	; (80026c4 <TIM_Base_SetConfig+0xd4>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d108      	bne.n	800263a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800262e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	68fa      	ldr	r2, [r7, #12]
 8002636:	4313      	orrs	r3, r2
 8002638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002640:	d017      	beq.n	8002672 <TIM_Base_SetConfig+0x82>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a1c      	ldr	r2, [pc, #112]	; (80026b8 <TIM_Base_SetConfig+0xc8>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <TIM_Base_SetConfig+0x82>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a1b      	ldr	r2, [pc, #108]	; (80026bc <TIM_Base_SetConfig+0xcc>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d00f      	beq.n	8002672 <TIM_Base_SetConfig+0x82>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a1a      	ldr	r2, [pc, #104]	; (80026c0 <TIM_Base_SetConfig+0xd0>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d00b      	beq.n	8002672 <TIM_Base_SetConfig+0x82>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4a19      	ldr	r2, [pc, #100]	; (80026c4 <TIM_Base_SetConfig+0xd4>)
 800265e:	4293      	cmp	r3, r2
 8002660:	d007      	beq.n	8002672 <TIM_Base_SetConfig+0x82>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a18      	ldr	r2, [pc, #96]	; (80026c8 <TIM_Base_SetConfig+0xd8>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d003      	beq.n	8002672 <TIM_Base_SetConfig+0x82>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a17      	ldr	r2, [pc, #92]	; (80026cc <TIM_Base_SetConfig+0xdc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d108      	bne.n	8002684 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002678:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4313      	orrs	r3, r2
 8002682:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	615a      	str	r2, [r3, #20]
}
 80026ae:	bf00      	nop
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40000c00 	.word	0x40000c00
 80026c4:	40010800 	.word	0x40010800
 80026c8:	40010c00 	.word	0x40010c00
 80026cc:	40011000 	.word	0x40011000

080026d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b087      	sub	sp, #28
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a1b      	ldr	r3, [r3, #32]
 80026de:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a1b      	ldr	r3, [r3, #32]
 80026e4:	f023 0201 	bic.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f023 0303 	bic.w	r3, r3, #3
 8002706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	4313      	orrs	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	f023 0302 	bic.w	r3, r3, #2
 8002718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	4313      	orrs	r3, r2
 8002722:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	693a      	ldr	r2, [r7, #16]
 8002728:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	697a      	ldr	r2, [r7, #20]
 800273c:	621a      	str	r2, [r3, #32]
}
 800273e:	bf00      	nop
 8002740:	371c      	adds	r7, #28
 8002742:	46bd      	mov	sp, r7
 8002744:	bc80      	pop	{r7}
 8002746:	4770      	bx	lr

08002748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002748:	b480      	push	{r7}
 800274a:	b087      	sub	sp, #28
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6a1b      	ldr	r3, [r3, #32]
 8002756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a1b      	ldr	r3, [r3, #32]
 800275c:	f023 0210 	bic.w	r2, r3, #16
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	699b      	ldr	r3, [r3, #24]
 800276e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800277e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	68fa      	ldr	r2, [r7, #12]
 8002788:	4313      	orrs	r3, r2
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0320 	bic.w	r3, r3, #32
 8002792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	4313      	orrs	r3, r2
 800279e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	693a      	ldr	r2, [r7, #16]
 80027a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68fa      	ldr	r2, [r7, #12]
 80027aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	621a      	str	r2, [r3, #32]
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bc80      	pop	{r7}
 80027c2:	4770      	bx	lr

080027c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b087      	sub	sp, #28
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1b      	ldr	r3, [r3, #32]
 80027d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69db      	ldr	r3, [r3, #28]
 80027ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f023 0303 	bic.w	r3, r3, #3
 80027fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800280c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	021b      	lsls	r3, r3, #8
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	4313      	orrs	r3, r2
 8002818:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	693a      	ldr	r2, [r7, #16]
 800281e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	68fa      	ldr	r2, [r7, #12]
 8002824:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	621a      	str	r2, [r3, #32]
}
 8002834:	bf00      	nop
 8002836:	371c      	adds	r7, #28
 8002838:	46bd      	mov	sp, r7
 800283a:	bc80      	pop	{r7}
 800283c:	4770      	bx	lr

0800283e <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800283e:	b480      	push	{r7}
 8002840:	b087      	sub	sp, #28
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]
 8002846:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a1b      	ldr	r3, [r3, #32]
 800284c:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002874:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	021b      	lsls	r3, r3, #8
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002888:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	031b      	lsls	r3, r3, #12
 8002890:	697a      	ldr	r2, [r7, #20]
 8002892:	4313      	orrs	r3, r2
 8002894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b087      	sub	sp, #28
 80028be:	af00      	add	r7, sp, #0
 80028c0:	60f8      	str	r0, [r7, #12]
 80028c2:	60b9      	str	r1, [r7, #8]
 80028c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a1b      	ldr	r3, [r3, #32]
 80028d0:	f023 0201 	bic.w	r2, r3, #1
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	011b      	lsls	r3, r3, #4
 80028ea:	693a      	ldr	r2, [r7, #16]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f023 030a 	bic.w	r3, r3, #10
 80028f6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028f8:	697a      	ldr	r2, [r7, #20]
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	4313      	orrs	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	693a      	ldr	r2, [r7, #16]
 8002904:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	697a      	ldr	r2, [r7, #20]
 800290a:	621a      	str	r2, [r3, #32]
}
 800290c:	bf00      	nop
 800290e:	371c      	adds	r7, #28
 8002910:	46bd      	mov	sp, r7
 8002912:	bc80      	pop	{r7}
 8002914:	4770      	bx	lr

08002916 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002916:	b480      	push	{r7}
 8002918:	b087      	sub	sp, #28
 800291a:	af00      	add	r7, sp, #0
 800291c:	60f8      	str	r0, [r7, #12]
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6a1b      	ldr	r3, [r3, #32]
 8002926:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a1b      	ldr	r3, [r3, #32]
 800292c:	f023 0210 	bic.w	r2, r3, #16
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002940:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	031b      	lsls	r3, r3, #12
 8002946:	693a      	ldr	r2, [r7, #16]
 8002948:	4313      	orrs	r3, r2
 800294a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002952:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	697a      	ldr	r2, [r7, #20]
 800295a:	4313      	orrs	r3, r2
 800295c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	693a      	ldr	r2, [r7, #16]
 8002962:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	697a      	ldr	r2, [r7, #20]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800298a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	4313      	orrs	r3, r2
 8002992:	f043 0307 	orr.w	r3, r3, #7
 8002996:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	609a      	str	r2, [r3, #8]
}
 800299e:	bf00      	nop
 80029a0:	3714      	adds	r7, #20
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bc80      	pop	{r7}
 80029a6:	4770      	bx	lr

080029a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
 80029b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80029bc:	697b      	ldr	r3, [r7, #20]
 80029be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80029c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	021a      	lsls	r2, r3, #8
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	431a      	orrs	r2, r3
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	697a      	ldr	r2, [r7, #20]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	609a      	str	r2, [r3, #8]
}
 80029dc:	bf00      	nop
 80029de:	371c      	adds	r7, #28
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bc80      	pop	{r7}
 80029e4:	4770      	bx	lr

080029e6 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80029e6:	b480      	push	{r7}
 80029e8:	b087      	sub	sp, #28
 80029ea:	af00      	add	r7, sp, #0
 80029ec:	60f8      	str	r0, [r7, #12]
 80029ee:	60b9      	str	r1, [r7, #8]
 80029f0:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	f003 031f 	and.w	r3, r3, #31
 80029f8:	2201      	movs	r2, #1
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	401a      	ands	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1a      	ldr	r2, [r3, #32]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 031f 	and.w	r3, r3, #31
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	621a      	str	r2, [r3, #32]
}
 8002a24:	bf00      	nop
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
	...

08002a30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b085      	sub	sp, #20
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002a44:	2302      	movs	r3, #2
 8002a46:	e046      	b.n	8002ad6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68fa      	ldr	r2, [r7, #12]
 8002a80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8a:	d00e      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d009      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a12      	ldr	r2, [pc, #72]	; (8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d004      	beq.n	8002aaa <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a10      	ldr	r2, [pc, #64]	; (8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d10c      	bne.n	8002ac4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002ab0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	68ba      	ldr	r2, [r7, #8]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40000400 	.word	0x40000400
 8002ae4:	40000800 	.word	0x40000800
 8002ae8:	40010800 	.word	0x40010800

08002aec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b082      	sub	sp, #8
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afa:	2301      	movs	r3, #1
 8002afc:	e042      	b.n	8002b84 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d106      	bne.n	8002b18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7fd ffec 	bl	8000af0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2224      	movs	r2, #36	; 0x24
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68da      	ldr	r2, [r3, #12]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f000 f82b 	bl	8002b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	695a      	ldr	r2, [r3, #20]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68da      	ldr	r2, [r3, #12]
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2220      	movs	r2, #32
 8002b70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2220      	movs	r2, #32
 8002b78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	68da      	ldr	r2, [r3, #12]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	695b      	ldr	r3, [r3, #20]
 8002bb8:	431a      	orrs	r2, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	69db      	ldr	r3, [r3, #28]
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002bcc:	f023 030c 	bic.w	r3, r3, #12
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	6812      	ldr	r2, [r2, #0]
 8002bd4:	68b9      	ldr	r1, [r7, #8]
 8002bd6:	430b      	orrs	r3, r1
 8002bd8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	699a      	ldr	r2, [r3, #24]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a55      	ldr	r2, [pc, #340]	; (8002d4c <UART_SetConfig+0x1c0>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d103      	bne.n	8002c02 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bfa:	f7ff f9dd 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	e002      	b.n	8002c08 <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002c02:	f7ff f9c5 	bl	8001f90 <HAL_RCC_GetPCLK1Freq>
 8002c06:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	69db      	ldr	r3, [r3, #28]
 8002c0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c10:	d14c      	bne.n	8002cac <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c12:	68fa      	ldr	r2, [r7, #12]
 8002c14:	4613      	mov	r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	009a      	lsls	r2, r3, #2
 8002c1c:	441a      	add	r2, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c28:	4a49      	ldr	r2, [pc, #292]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	0119      	lsls	r1, r3, #4
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4613      	mov	r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	009a      	lsls	r2, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	005b      	lsls	r3, r3, #1
 8002c44:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c48:	4b41      	ldr	r3, [pc, #260]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002c4a:	fba3 0302 	umull	r0, r3, r3, r2
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2064      	movs	r0, #100	; 0x64
 8002c52:	fb00 f303 	mul.w	r3, r0, r3
 8002c56:	1ad3      	subs	r3, r2, r3
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	3332      	adds	r3, #50	; 0x32
 8002c5c:	4a3c      	ldr	r2, [pc, #240]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c62:	095b      	lsrs	r3, r3, #5
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002c6a:	4419      	add	r1, r3
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	009a      	lsls	r2, r3, #2
 8002c76:	441a      	add	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c82:	4b33      	ldr	r3, [pc, #204]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002c84:	fba3 0302 	umull	r0, r3, r3, r2
 8002c88:	095b      	lsrs	r3, r3, #5
 8002c8a:	2064      	movs	r0, #100	; 0x64
 8002c8c:	fb00 f303 	mul.w	r3, r0, r3
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	00db      	lsls	r3, r3, #3
 8002c94:	3332      	adds	r3, #50	; 0x32
 8002c96:	4a2e      	ldr	r2, [pc, #184]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002c98:	fba2 2303 	umull	r2, r3, r2, r3
 8002c9c:	095b      	lsrs	r3, r3, #5
 8002c9e:	f003 0207 	and.w	r2, r3, #7
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	440a      	add	r2, r1
 8002ca8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002caa:	e04a      	b.n	8002d42 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4613      	mov	r3, r2
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	4413      	add	r3, r2
 8002cb4:	009a      	lsls	r2, r3, #2
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc2:	4a23      	ldr	r2, [pc, #140]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc8:	095b      	lsrs	r3, r3, #5
 8002cca:	0119      	lsls	r1, r3, #4
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4613      	mov	r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	4413      	add	r3, r2
 8002cd4:	009a      	lsls	r2, r3, #2
 8002cd6:	441a      	add	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002ce4:	fba3 0302 	umull	r0, r3, r3, r2
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	2064      	movs	r0, #100	; 0x64
 8002cec:	fb00 f303 	mul.w	r3, r0, r3
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	3332      	adds	r3, #50	; 0x32
 8002cf6:	4a16      	ldr	r2, [pc, #88]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8002cfc:	095b      	lsrs	r3, r3, #5
 8002cfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d02:	4419      	add	r1, r3
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	4613      	mov	r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	4413      	add	r3, r2
 8002d0c:	009a      	lsls	r2, r3, #2
 8002d0e:	441a      	add	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	fbb2 f2f3 	udiv	r2, r2, r3
 8002d1a:	4b0d      	ldr	r3, [pc, #52]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002d1c:	fba3 0302 	umull	r0, r3, r3, r2
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	2064      	movs	r0, #100	; 0x64
 8002d24:	fb00 f303 	mul.w	r3, r0, r3
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	3332      	adds	r3, #50	; 0x32
 8002d2e:	4a08      	ldr	r2, [pc, #32]	; (8002d50 <UART_SetConfig+0x1c4>)
 8002d30:	fba2 2303 	umull	r2, r3, r2, r3
 8002d34:	095b      	lsrs	r3, r3, #5
 8002d36:	f003 020f 	and.w	r2, r3, #15
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	440a      	add	r2, r1
 8002d40:	609a      	str	r2, [r3, #8]
}
 8002d42:	bf00      	nop
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	40013800 	.word	0x40013800
 8002d50:	51eb851f 	.word	0x51eb851f

08002d54 <memset>:
 8002d54:	4603      	mov	r3, r0
 8002d56:	4402      	add	r2, r0
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d100      	bne.n	8002d5e <memset+0xa>
 8002d5c:	4770      	bx	lr
 8002d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8002d62:	e7f9      	b.n	8002d58 <memset+0x4>

08002d64 <__libc_init_array>:
 8002d64:	b570      	push	{r4, r5, r6, lr}
 8002d66:	2600      	movs	r6, #0
 8002d68:	4d0c      	ldr	r5, [pc, #48]	; (8002d9c <__libc_init_array+0x38>)
 8002d6a:	4c0d      	ldr	r4, [pc, #52]	; (8002da0 <__libc_init_array+0x3c>)
 8002d6c:	1b64      	subs	r4, r4, r5
 8002d6e:	10a4      	asrs	r4, r4, #2
 8002d70:	42a6      	cmp	r6, r4
 8002d72:	d109      	bne.n	8002d88 <__libc_init_array+0x24>
 8002d74:	f000 f81a 	bl	8002dac <_init>
 8002d78:	2600      	movs	r6, #0
 8002d7a:	4d0a      	ldr	r5, [pc, #40]	; (8002da4 <__libc_init_array+0x40>)
 8002d7c:	4c0a      	ldr	r4, [pc, #40]	; (8002da8 <__libc_init_array+0x44>)
 8002d7e:	1b64      	subs	r4, r4, r5
 8002d80:	10a4      	asrs	r4, r4, #2
 8002d82:	42a6      	cmp	r6, r4
 8002d84:	d105      	bne.n	8002d92 <__libc_init_array+0x2e>
 8002d86:	bd70      	pop	{r4, r5, r6, pc}
 8002d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d8c:	4798      	blx	r3
 8002d8e:	3601      	adds	r6, #1
 8002d90:	e7ee      	b.n	8002d70 <__libc_init_array+0xc>
 8002d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8002d96:	4798      	blx	r3
 8002d98:	3601      	adds	r6, #1
 8002d9a:	e7f2      	b.n	8002d82 <__libc_init_array+0x1e>
 8002d9c:	08002df0 	.word	0x08002df0
 8002da0:	08002df0 	.word	0x08002df0
 8002da4:	08002df0 	.word	0x08002df0
 8002da8:	08002df4 	.word	0x08002df4

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
